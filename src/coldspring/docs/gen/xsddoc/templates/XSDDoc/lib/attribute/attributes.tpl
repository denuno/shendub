<DOCFLEX_TEMPLATE VER='1.13'>
CREATED='2005-04-26 03:31:00'
LAST_UPDATE='2009-10-30 06:36:29'
DESIGNER_TOOL='DocFlex SDK 1.x'
DESIGNER_LICENSE_TYPE='Filigris Works Team'
APP_ID='docflex-xml-xsddoc2'
APP_NAME='DocFlex/XML XSDDoc'
APP_VER='2.2.0'
APP_AUTHOR='Copyright \u00a9 2005-2009 Filigris Works,\nLeonid Rudy Softwareprodukte. All rights reserved.'
TEMPLATE_TYPE='DocumentTemplate'
DSM_TYPE_ID='xsddoc'
ROOT_ETS={'xs:%element';'xs:attributeGroup';'xs:complexType'}
<TEMPLATE_PARAMS>
	PARAM={
		param.name='contentModelKey';
		param.title='"content-model-attributes" map key';
		param.description='The key for "content-model-attributes" map to find all attributes associated with this schema component';
		param.type='Object';
		param.default.expr='contextElement.id';
	}
	PARAM={
		param.name='attributeCount';
		param.title='number of all attributes';
		param.description='total number of attributes declared for this component';
		param.type='integer';
		param.default.expr='countElementsByKey (\n  "content-model-attributes", \n  getParam("contentModelKey"),\n  BooleanQuery (\n   ! instanceOf ("xs:anyAttribute") &&\n   getAttrValue("use") != "prohibited"\n  )\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='attributeWildcardCount';
		param.title='number of all attr. wildcards';
		param.description='total number of attribute wildcards declared for this component';
		param.type='integer';
		param.default.expr='countElementsByKey (\n  "content-model-attributes", \n  getParam("contentModelKey"),\n  BooleanQuery (instanceOf ("xs:anyAttribute"))\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='ownAttributeCount';
		param.title='number of attributes defined in this component';
		param.type='integer';
		param.default.expr='countElementsByKey (\n  "content-model-attributes", \n  getParam("contentModelKey"),\n  BooleanQuery (\n    ! instanceOf ("xs:anyAttribute") &&\n    getAttrValue("use") != "prohibited" &&\n    findPredecessorByType("xs:%element|xs:complexType|xs:attributeGroup").id\n    == rootElement.id\n  )\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='ownAttributeWildcardCount';
		param.title='number of attr. wildcards defined in this component';
		param.type='integer';
		param.default.expr='countElementsByKey (\n  "content-model-attributes", \n  getParam("contentModelKey"),\n  BooleanQuery (\n    instanceOf ("xs:anyAttribute") &&\n    findPredecessorByType("xs:%element|xs:complexType|xs:attributeGroup").id\n    == rootElement.id\n  )\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='ownAttributeProhibitionCount';
		param.title='number of attr. prohibitions specified in this component';
		param.type='integer';
		param.default.expr='countElementsByKey (\n  "content-model-attributes", \n  getParam("contentModelKey"),\n  BooleanQuery (\n    getAttrValue("use") == "prohibited" &&\n    findPredecessorByType("xs:%element|xs:complexType|xs:attributeGroup").id\n    == rootElement.id\n  )\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='allCount';
		param.title='number of all definitions';
		param.type='integer';
		param.default.expr='getIntParam("attributeCount") +\ngetIntParam("attributeWildcardCount") +\ngetIntParam("ownAttributeProhibitionCount")';
	}
	PARAM={
		param.name='ownCount';
		param.title='number of all definitions specified in this component';
		param.type='integer';
		param.default.expr='getIntParam("ownAttributeCount") +\ngetIntParam("ownAttributeWildcardCount") +\ngetIntParam("ownAttributeProhibitionCount")';
	}
	PARAM={
		param.name='doc.comp.attributes';
		param.title='Attribute Detail';
		param.title.style.bold='true';
		param.grouping='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.include';
		param.title='Include';
		param.title.style.italic='true';
		param.grouping='true';
	}
	PARAM={
		param.name='doc.comp.attributes.include.inherited';
		param.title='Inherited';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.include.local';
		param.title='Local';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.include.references';
		param.title='References';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.include.wildcard';
		param.title='Wildcard';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.include.prohibitions';
		param.title='Prohibitions';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.profile';
		param.title='Profile';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.profile.form';
		param.title='Form';
		param.featureType='pro';
		param.type='enum';
		param.enum.values='any;non_default;none';
		param.enum.displayValues='any;non-default only;none';
		param.default.value='non_default';
	}
	PARAM={
		param.name='doc.comp.attributes.profile.type';
		param.title='Type';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.profile.use';
		param.title='Usage';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.profile.default';
		param.title='Default Value';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.profile.fixed';
		param.title='Fixed Value';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.profile.defined';
		param.title='Definition Location';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.annotation';
		param.title='Annotation';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.value';
		param.title='Attribute Value';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.value.model';
		param.title='Datatype Model';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.value.restrictions';
		param.title='Restrictions';
		param.grouping='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.value.restrictions.annotation';
		param.title='Annotations';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.value.default';
		param.title='Default Value';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.value.fixed';
		param.title='Fixed Value';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.type';
		param.title='Type Detail';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.type.for';
		param.title='Generate For';
		param.title.style.italic='true';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
	}
	PARAM={
		param.name='doc.comp.attributes.type.for.attr';
		param.title='Attributes';
		param.title.style.italic='true';
		param.type='enum';
		param.enum.values='local;any';
	}
	PARAM={
		param.name='doc.comp.attributes.type.for.typeDecl';
		param.title='Type Declarations';
		param.title.style.italic='true';
		param.type='enum';
		param.enum.values='anonymous;any';
	}
	PARAM={
		param.name='doc.comp.attributes.type.annotation';
		param.title='Annotation';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.type.deriv.tree';
		param.title='Type Derivation Tree';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.type.deriv.simpleContent';
		param.title='Simple Content Derivation';
		param.grouping='true';
		param.type='enum';
		param.enum.values='local;full;none';
	}
	PARAM={
		param.name='doc.comp.attributes.type.deriv.simpleContent.facets';
		param.title='Facets';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.type.deriv.simpleContent.annotations';
		param.title='Annotations';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.xml';
		param.title='XML Source';
		param.title.style.bold='true';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.xml.box';
		param.title='Enclose in Box';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.comp.attributes.xml.remove.anns';
		param.title='Remove Annotations';
		param.type='boolean';
	}
	PARAM={
		param.name='fmt.page.refs';
		param.title='Generate page references';
		param.type='boolean';
	}
</TEMPLATE_PARAMS>
FMT={
	doc.lengthUnits='pt';
	doc.hlink.style.link='cs6';
}
<STYLES>
	CHAR_STYLE={
		style.name='Annotation Smaller';
		style.id='cs1';
		text.font.name='Arial';
		text.font.size='9';
	}
	CHAR_STYLE={
		style.name='Annotation Smallest';
		style.id='cs2';
		text.font.name='Arial';
		text.font.size='8';
	}
	CHAR_STYLE={
		style.name='Code';
		style.id='cs3';
		text.font.name='Courier New';
		text.font.size='9';
	}
	CHAR_STYLE={
		style.name='Code Smaller';
		style.id='cs4';
		text.font.name='Courier New';
		text.font.size='8';
	}
	CHAR_STYLE={
		style.name='Default Paragraph Font';
		style.id='cs5';
		style.default='true';
	}
	PAR_STYLE={
		style.name='Detail Heading 1';
		style.id='s1';
		text.font.style.bold='true';
		par.bkgr.opaque='true';
		par.bkgr.color='#CCCCFF';
		par.border.style='solid';
		par.border.color='#666666';
		par.margin.top='14';
		par.margin.bottom='10';
		par.padding.left='2';
		par.padding.right='2';
		par.padding.top='2';
		par.padding.bottom='2';
		par.page.keepWithNext='true';
	}
	PAR_STYLE={
		style.name='Detail Heading 4';
		style.id='s2';
		text.font.name='Arial';
		text.font.size='9';
		text.font.style.bold='true';
		text.font.style.italic='true';
		text.color.background='#CCCCFF';
		text.color.opaque='true';
		par.margin.top='8';
		par.margin.bottom='8';
		par.page.keepWithNext='true';
	}
	CHAR_STYLE={
		style.name='Hyperlink';
		style.id='cs6';
		text.decor.underline='true';
		text.color.foreground='#0000FF';
	}
	PAR_STYLE={
		style.name='Normal';
		style.id='s3';
		style.default='true';
	}
	CHAR_STYLE={
		style.name='Note Font';
		style.id='cs7';
		text.font.name='Arial';
		text.font.size='8';
		text.font.style.bold='false';
		par.lineHeight='11';
		par.margin.right='7';
	}
	CHAR_STYLE={
		style.name='Page Number Small';
		style.id='cs8';
		text.font.name='Courier New';
		text.font.size='8';
	}
	PAR_STYLE={
		style.name='Property Title';
		style.id='s4';
		text.font.size='8';
		text.font.style.bold='true';
		par.lineHeight='11';
		par.margin.right='7';
	}
	PAR_STYLE={
		style.name='Property Value';
		style.id='s5';
		text.font.name='Verdana';
		text.font.size='8';
		par.lineHeight='11';
	}
</STYLES>
<ROOT>
	<ELEMENT_ITER>
		FMT={
			table.sizing='Relative';
		}
		<HTARGET>
			HKEYS={
				'contextElement.id';
				'"attribute-detail"';
			}
		</HTARGET>
		TARGET_ETS={'xs:%attribute';'xs:anyAttribute'}
		SCOPE='custom'
		ELEMENT_ENUM_EXPR='findElementsByKey (\n  "content-model-attributes",\n\n  // the key to find all items associated with this component\n  getParam("contentModelKey"),\n\n  // filter according template parameters\n  BooleanQuery ({\n    // if this is an attribute prohibition\n    getAttrValue("use") == "prohibited" ?\n      // check if it\'s requested to be printed\n      getBooleanParam("doc.comp.attributes.include.prohibitions") &&\n      // only prohibitions specified in this component are relevant!\n      findPredecessorByType("xs:%element|xs:complexType|xs:attributeGroup").id == rootElement.id\n    :\n    // otherwise, when this is a local attribute, reference or wildcard, check if such\n    // a kind is requested to be printed\n    (getAttrValue("name") != null ? getBooleanParam("doc.comp.attributes.include.local") :\n     getAttrValue("ref") != null ? getBooleanParam("doc.comp.attributes.include.references") :\n     instanceOf ("xs:anyAttribute") && getBooleanParam("doc.comp.attributes.include.wildcard"))\n    &&\n    // at last, if inherited definitions should be excluded, test if this one is\n    // specified in the current component (passed as the template\'s root element)\n    (getBooleanParam("doc.comp.attributes.include.inherited") ||\n     findPredecessorByType("xs:%element|xs:complexType|xs:attributeGroup").id == rootElement.id)\n  })\n)'
		SORTING='by-expr'
		SORTING_KEY={expr='instanceOf("xs:anyAttribute")\n  ? callStockSection("Any Attribute")\n  : hasAttr("name") ? callStockSection("Attribute Name") \n                    : getAttrQNameValue("ref").toXMLName()',ascending}
		STEP_EXPR='// schema component where the attribute was defined\n\nsetVar (\n  "definitionLocation",\n  findPredecessorByType("xs:%element|xs:complexType|xs:attributeGroup")\n)'
		<BODY>
			<FOLDER>
				DESCR='when this is a prohibited attribute'
				COND='getAttrValue("use") == "prohibited"'
				MATCHING_ET='xs:%attribute'
				<HTARGET>
					COND='getElementVar ("definitionLocation").id == rootElement.id'
					HKEYS={
						'contextElement.id';
						'"def"';
					}
				</HTARGET>
				<HTARGET>
					HKEYS={
						'rootElement.id';
						'"attribute-prohibition"';
					}
				</HTARGET>
				<BODY>
					<AREA_SEC>
						DESCR='when the attribute name is specified'
						COND='getAttrValue("name") != ""'
						MATCHING_ET='xs:%attribute'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
									text.style='cs3';
									par.margin.bottom='6';
									par.page.keepWithNext='true';
								}
								<CTRLS>
									<IMAGE_CTRL>
										IMAGE_TYPE='file-image'
										FILE='../images/attribute.gif'
									</IMAGE_CTRL>
									<DELIMITER>
										FMT={
											text.font.size='7';
										}
									</DELIMITER>
									<SS_CALL_CTRL>
										FMT={
											text.decor.strikethrough='true';
										}
										SS_NAME='Attribute Name'
									</SS_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='when a reference is specified, which can be resolved into a documented global attribute'
						COND='sectionBlock.execSecNone'
						CONTEXT_ELEMENT_EXPR='findElementByKey ("global-attributes", getAttrQNameValue("ref"))'
						MATCHING_ET='xs:%attribute'
						<AREA>
							<CTRL_GROUP>
								FMT={
									text.style='cs3';
									par.margin.bottom='6';
									par.page.keepWithNext='true';
								}
								<CTRLS>
									<IMAGE_CTRL>
										IMAGE_TYPE='file-image'
										FILE='../images/attribute.gif'
									</IMAGE_CTRL>
									<DELIMITER>
										FMT={
											text.style='cs3';
											text.font.size='7';
										}
									</DELIMITER>
									<SS_CALL_CTRL>
										FMT={
											text.decor.strikethrough='true';
										}
										SS_NAME='XMLName'
									</SS_CALL_CTRL>
									<PANEL>
										COND='output.format.supportsPageRefs\n&&\ngetBooleanParam("fmt.page.refs")\n&&\nhyperTargetExists (ArgumentList (\n  contextElement.id,\n  Array ("detail", "xml-source-location")\n))'
										FMT={
											ctrl.size.width='168';
											text.style='cs8';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<DATA_CTRL>
														FMT={
															ctrl.option.noHLinkFmt='true';
															text.hlink.fmt='none';
														}
														<DOC_HLINK>
															HKEYS={
																'contextElement.id';
																'Array ("detail", "xml-source-location")',array;
															}
														</DOC_HLINK>
														DOCFIELD='page-htarget'
													</DATA_CTRL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='otherwise, unresolved referenced'
						COND='sectionBlock.execSecNone'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
									text.style='cs3';
									par.margin.bottom='6';
									par.page.keepWithNext='true';
								}
								<CTRLS>
									<IMAGE_CTRL>
										IMAGE_TYPE='file-image'
										FILE='../images/attribute.gif'
									</IMAGE_CTRL>
									<DELIMITER>
										FMT={
											text.font.size='7';
										}
									</DELIMITER>
									<DATA_CTRL>
										FMT={
											text.decor.strikethrough='true';
											par.margin.left='1';
											par.margin.right='1';
										}
										FORMULA='toXMLName (getAttrQNameValue("ref"))'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<SS_CALL>
						FMT={
							sec.indent.block='true';
						}
						SS_NAME='Attribute (prohibition)'
						PARAMS_EXPR='Array (getVar ("definitionLocation"))'
					</SS_CALL>
				</BODY>
			</FOLDER>
			<FOLDER>
				DESCR='otherwise, when the attribute is defined locally'
				COND='sectionBlock.execSecNone && getAttrValue("name") != ""'
				MATCHING_ET='xs:%attribute'
				<HTARGET>
					HKEYS={
						'contextElement.id';
						'"local"';
						'rootElement.id';
					}
				</HTARGET>
				<HTARGET>
					COND='getElementVar ("definitionLocation").id == rootElement.id'
					HKEYS={
						'contextElement.id';
						'"def"';
					}
				</HTARGET>
				<HTARGET>
					COND='getElementVar ("definitionLocation").id == rootElement.id'
					HKEYS={
						'rootElement.id';
						'"attribute-def"';
					}
				</HTARGET>
				<BODY>
					<AREA_SEC>
						MATCHING_ET='xs:%attribute'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
									text.style='cs3';
									par.margin.bottom='6';
									par.page.keepWithNext='true';
								}
								<CTRLS>
									<IMAGE_CTRL>
										IMAGE_TYPE='file-image'
										FILE='../images/attribute.gif'
									</IMAGE_CTRL>
									<DELIMITER>
										FMT={
											text.font.size='7';
										}
									</DELIMITER>
									<SS_CALL_CTRL>
										SS_NAME='Attribute Name'
									</SS_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<SS_CALL>
						FMT={
							sec.indent.block='true';
						}
						SS_NAME='Attribute (local)'
						PARAMS_EXPR='Array (getVar ("definitionLocation"))'
					</SS_CALL>
				</BODY>
			</FOLDER>
			<FOLDER>
				DESCR='otherwise, when this is a reference to a global attribute'
				COND='sectionBlock.execSecNone && getAttrValue("ref") != null'
				MATCHING_ET='xs:%attribute'
				<HTARGET>
					HKEYS={
						'contextElement.id';
						'"local"';
						'rootElement.id';
					}
				</HTARGET>
				<HTARGET>
					COND='getElementVar ("definitionLocation").id == rootElement.id'
					HKEYS={
						'contextElement.id';
						'"def"';
					}
				</HTARGET>
				<HTARGET>
					COND='getElementVar ("definitionLocation").id == rootElement.id'
					HKEYS={
						'rootElement.id';
						'"attribute-def"';
					}
				</HTARGET>
				<BODY>
					<AREA_SEC>
						DESCR='when the reference is resolved into a documented global attribute'
						CONTEXT_ELEMENT_EXPR='findElementByKey (\n  "global-attributes",\n  getAttrQNameValue("ref")\n)'
						MATCHING_ET='xs:%attribute'
						<HTARGET>
							HKEYS={
								'contextElement.id';
								'"local"';
								'rootElement.id';
							}
						</HTARGET>
						<AREA>
							<CTRL_GROUP>
								FMT={
									text.style='cs3';
									par.margin.bottom='6';
									par.page.keepWithNext='true';
								}
								<CTRLS>
									<IMAGE_CTRL>
										IMAGE_TYPE='file-image'
										FILE='../images/attribute.gif'
									</IMAGE_CTRL>
									<DELIMITER>
										FMT={
											text.style='cs3';
											text.font.size='7';
										}
									</DELIMITER>
									<SS_CALL_CTRL>
										SS_NAME='XMLName'
									</SS_CALL_CTRL>
									<PANEL>
										COND='output.format.supportsPageRefs\n&&\ngetBooleanParam("fmt.page.refs")\n&&\nhyperTargetExists (ArgumentList (\n  contextElement.id,\n  Array ("detail", "xml-source-location")\n))'
										FMT={
											ctrl.size.width='168';
											text.style='cs8';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<DATA_CTRL>
														FMT={
															ctrl.option.noHLinkFmt='true';
															text.hlink.fmt='none';
														}
														<DOC_HLINK>
															HKEYS={
																'contextElement.id';
																'Array ("detail", "xml-source-location")',array;
															}
														</DOC_HLINK>
														DOCFIELD='page-htarget'
													</DATA_CTRL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='otherwise, the referenced global attribute is not within documentation scope'
						COND='sectionBlock.execSecNone'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
									text.style='cs3';
									par.margin.bottom='6';
									par.page.keepWithNext='true';
								}
								<CTRLS>
									<IMAGE_CTRL>
										IMAGE_TYPE='file-image'
										FILE='../images/attribute.gif'
									</IMAGE_CTRL>
									<DELIMITER>
										FMT={
											text.font.size='7';
										}
									</DELIMITER>
									<DATA_CTRL>
										FMT={
											par.margin.left='1';
											par.margin.right='1';
										}
										FORMULA='toXMLName (getAttrQNameValue("ref"))'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<SS_CALL>
						FMT={
							sec.indent.block='true';
						}
						SS_NAME='Attribute (reference)'
						PARAMS_EXPR='Array (getVar ("definitionLocation"))'
					</SS_CALL>
				</BODY>
			</FOLDER>
			<FOLDER>
				DESCR='otherwise, if this is an attribute wildcard'
				COND='sectionBlock.execSecNone'
				MATCHING_ET='xs:anyAttribute'
				<HTARGET>
					HKEYS={
						'contextElement.id';
						'"local"';
						'rootElement.id';
					}
				</HTARGET>
				<HTARGET>
					COND='getElementVar ("definitionLocation").id == rootElement.id'
					HKEYS={
						'contextElement.id';
						'"def"';
					}
				</HTARGET>
				<HTARGET>
					HKEYS={
						'rootElement.id';
						'"attribute-wildcard"';
					}
				</HTARGET>
				<HTARGET>
					COND='getElementVar ("definitionLocation").id == rootElement.id'
					HKEYS={
						'rootElement.id';
						'"attribute-wildcard-def"';
					}
				</HTARGET>
				<BODY>
					<AREA_SEC>
						MATCHING_ET='xs:anyAttribute'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
									text.style='cs3';
									par.margin.bottom='6';
									par.page.keepWithNext='true';
								}
								<CTRLS>
									<IMAGE_CTRL>
										IMAGE_TYPE='file-image'
										FILE='../images/attribute.gif'
									</IMAGE_CTRL>
									<DELIMITER>
										FMT={
											text.font.size='7';
										}
									</DELIMITER>
									<SS_CALL_CTRL>
										FMT={
											text.style='cs4';
											text.font.style.italic='true';
										}
										SS_NAME='Any Attribute'
									</SS_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<SS_CALL>
						FMT={
							sec.indent.block='true';
						}
						SS_NAME='Attribute (wildcard)'
						PARAMS_EXPR='Array (getVar ("definitionLocation"))'
					</SS_CALL>
				</BODY>
			</FOLDER>
			<AREA_SEC>
				COND='! iterator.isLastItem'
				<AREA>
					<HR>
						FMT={
							rule.style='dashed';
							rule.color='#B2B2B2';
							par.margin.top='12';
							par.margin.bottom='8';
						}
					</HR>
				</AREA>
			</AREA_SEC>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s1';
				}
				<AREA>
					<CTRL_GROUP>
						FMT={
							trow.bkgr.color='#CCCCFF';
						}
						<CTRLS>
							<LABEL>
								TEXT='Attribute Detail'
							</LABEL>
							<DELIMITER>
								FMT={
									text.style='cs3';
									text.font.style.bold='false';
								}
							</DELIMITER>
							<SS_CALL_CTRL>
								FMT={
									text.style='cs7';
									text.font.style.bold='false';
								}
								SS_NAME='scope'
							</SS_CALL_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</ELEMENT_ITER>
</ROOT>
<STOCK_SECTIONS>
	<FOLDER>
		MATCHING_ET='xs:%annotated'
		SS_NAME='annotation'
		<BODY>
			<TEMPLATE_CALL>
				FMT={
					par.lineHeight='0';
				}
				TEMPLATE_FILE='../ann/annotation.tpl'
			</TEMPLATE_CALL>
		</BODY>
	</FOLDER>
	<FOLDER>
		DESCR='print the representation of the attribute wildcard'
		MATCHING_ET='xs:anyAttribute'
		SS_NAME='Any Attribute'
		<BODY>
			<TEMPLATE_CALL>
				TEMPLATE_FILE='../content/wildcard.tpl'
			</TEMPLATE_CALL>
		</BODY>
	</FOLDER>
	<FOLDER>
		DESCR='params[0]: the schema component where this attribute is defined'
		MATCHING_ET='xs:%attribute'
		INIT_EXPR='typeQName = getAttrQNameValue("type");\n\ntype = (typeQName != null)\n       ? findElementByKey ("types", typeQName) \n       : findChild("xs:simpleType");\n\nstockSection.setVar ("attrTypeQName", typeQName);\nstockSection.setVar ("attrType", type);'
		SS_NAME='Attribute (local)'
		<BODY>
			<FOLDER>
				DESCR='PROFILE'
				COND='getBooleanParam("doc.comp.attributes.profile")'
				FMT={
					sec.outputStyle='table';
					table.cellpadding.both='0';
					table.border.style='none';
					table.option.borderStylesInHTML='true';
				}
				<BODY>
					<AREA_SEC>
						COND='! hasParamValue("doc.comp.attributes.profile.form", "none")\n&&\n(\n  getAttrValue("form") != null\n  ||\n  hasParamValue("doc.comp.attributes.profile.form", "any") &&\n    findAncestor("xs:schema").getAttrValue ("attributeFormDefault") != null\n)'
						FMT={
							trow.align.vert='Top';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='38.3';
											par.style='s4';
										}
										TEXT='Form:'
									</LABEL>
									<PANEL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='38.3';
											par.style='s5';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='namespace'
													</LABEL>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='text';
															txtfl.delimiter.text='-';
														}
													</DELIMITER>
													<DATA_CTRL>
														FMT={
															ctrl.size.width='372';
															ctrl.size.height='17.3';
														}
														FORMULA='(form = getAttrValue("form")) == null ?\n  form = findAncestor("xs:schema").getAttrValue ("attributeFormDefault");\n\n(form != "qualified") ? "unqualified" : form'
													</DATA_CTRL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.profile.type")'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='43.5';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Type:'
									</LABEL>
									<SS_CALL_CTRL>
										FMT={
											ctrl.size.width='456';
											ctrl.size.height='17.3';
											par.style='s5';
										}
										SS_NAME='Attribute Type'
										PARAMS_EXPR='Array (stockSection.getElementVar("attrType"))'
									</SS_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.profile.use") &&\nhasAttr("use")'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Use:'
									</LABEL>
									<DATA_CTRL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='17.3';
											par.style='s5';
										}
										ATTR='use'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.profile.default") &&\nhasAttr("default")'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Default:'
									</LABEL>
									<DATA_CTRL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='17.3';
											text.style='cs4';
											par.style='s5';
										}
										FORMULA='\'"\' + getAttrValue("default") +\'"\''
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.profile.fixed") &&\nhasAttr("fixed")'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Fixed:'
									</LABEL>
									<DATA_CTRL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='17.3';
											text.style='cs4';
											par.style='s5';
										}
										FORMULA='\'"\' + getAttrValue("fixed") +\'"\''
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.profile.defined")'
						FMT={
							table.sizing='Relative';
							table.autofit='false';
							table.cellpadding.both='5';
							table.bkgr.color='#F5F5F5';
							table.border.style='solid';
							table.border.color='#999999';
							table.option.borderStylesInHTML='true';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='44.3';
											ctrl.size.height='140.3';
											par.style='s4';
										}
										TEXT='Defined:'
									</LABEL>
									<PANEL>
										FMT={
											ctrl.size.width='455.3';
											ctrl.size.height='140.3';
											par.style='s5';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														<DOC_HLINK>
															COND='stockSection.param.toElement().id != rootElement.id'
															HKEYS={
																'contextElement.id';
																'"def"';
															}
														</DOC_HLINK>
														TEXT='locally'
													</LABEL>
													<LABEL>
														TEXT='within'
													</LABEL>
													<PANEL>
														CONTEXT_ELEMENT_EXPR='stockSection.param.toElement()'
														MATCHING_ETS={'xs:%element';'xs:attributeGroup';'xs:complexType'}
														FMT={
															ctrl.size.width='351';
															ctrl.size.height='59.3';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<PANEL>
																		COND='rootElement.id == contextElement.id'
																		FMT={
																			ctrl.size.width='66.8';
																			txtfl.delimiter.type='none';
																		}
																		<AREA>
																			<CTRL_GROUP>
																				<CTRLS>
																					<LABEL>
																						TEXT='('
																					</LABEL>
																					<LABEL>
																						<DOC_HLINK>
																							HKEYS={
																								'contextElement.id';
																								'"detail"';
																							}
																						</DOC_HLINK>
																						TEXT='this'
																					</LABEL>
																					<LABEL>
																						TEXT=')'
																					</LABEL>
																				</CTRLS>
																			</CTRL_GROUP>
																		</AREA>
																	</PANEL>
																	<SS_CALL_CTRL>
																		FMT={
																			text.style='cs4';
																		}
																		SS_NAME='XMLName'
																	</SS_CALL_CTRL>
																	<LABEL>
																		MATCHING_ET='xs:%element'
																		TEXT='element'
																	</LABEL>
																	<LABEL>
																		MATCHING_ET='xs:complexType'
																		TEXT='complexType'
																	</LABEL>
																	<LABEL>
																		MATCHING_ET='xs:attributeGroup'
																		TEXT='attributeGroup'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='! getBooleanParam("doc.comp.attributes.xml")\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
														FMT={
															ctrl.size.width='289.5';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<DELIMITER>
																		FMT={
																			txtfl.delimiter.type='text';
																			txtfl.delimiter.text='; ';
																		}
																	</DELIMITER>
																	<LABEL>
																		TEXT='see'
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			HKEYS={
																				'contextElement.id';
																				'"xml-source-location"';
																			}
																		</DOC_HLINK>
																		TEXT='XML source'
																	</LABEL>
																	<PANEL>
																		COND='output.format.supportsPageRefs && \ngetBooleanParam("fmt.page.refs")'
																		FMT={
																			ctrl.size.width='183.8';
																			ctrl.size.height='38.3';
																			txtfl.delimiter.type='none';
																		}
																		<AREA>
																			<CTRL_GROUP>
																				<CTRLS>
																					<DELIMITER>
																						FMT={
																							txtfl.delimiter.type='nbsp';
																						}
																					</DELIMITER>
																					<LABEL>
																						FMT={
																							text.style='cs8';
																						}
																						TEXT='['
																					</LABEL>
																					<DATA_CTRL>
																						FMT={
																							ctrl.option.noHLinkFmt='true';
																							text.style='cs8';
																							text.hlink.fmt='none';
																						}
																						<DOC_HLINK>
																							HKEYS={
																								'contextElement.id';
																								'"xml-source-location"';
																							}
																						</DOC_HLINK>
																						DOCFIELD='page-htarget'
																					</DATA_CTRL>
																					<LABEL>
																						FMT={
																							text.style='cs8';
																						}
																						TEXT=']'
																					</LABEL>
																				</CTRLS>
																			</CTRL_GROUP>
																		</AREA>
																	</PANEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
			<SS_CALL>
				DESCR='ANNOTATION'
				COND='getBooleanParam("doc.comp.attributes.annotation")'
				FMT={
					sec.spacing.before='8';
					sec.spacing.after='8';
					text.style='cs1';
				}
				SS_NAME='annotation'
			</SS_CALL>
			<FOLDER>
				DESCR='ATTRIBUTE VALUE'
				COND='getBooleanParam("doc.comp.attributes.value")'
				FMT={
					sec.spacing.before='8';
				}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.value.model")\n&&\n! isXSPredefinedType (\n  stockSection.getQNameVar("attrTypeQName")\n)'
						CONTEXT_ELEMENT_EXPR='stockSection.getElementVar("attrType")'
						MATCHING_ET='xs:%simpleType'
						FMT={
							sec.outputStyle='table';
							sec.spacing.before='8';
							table.cellpadding.both='4';
							table.bkgr.color='#F5F5F5';
							table.border.style='solid';
							table.border.color='#999999';
							table.page.keepTogether='true';
							table.option.borderStylesInHTML='true';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<TEMPLATE_CALL_CTRL>
										FMT={
											ctrl.size.width='499.5';
											ctrl.size.height='17.3';
											text.style='cs4';
										}
										TEMPLATE_FILE='../content/simpleContentRep.tpl'
										PASSED_PARAMS={
											'abbreviate_enum','getBooleanParam("doc.comp.attributes.value.restrictions")';
										}
									</TEMPLATE_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<FOLDER>
						DESCR='table layout'
						FMT={
							sec.outputStyle='table';
							sec.spacing.before='4';
							table.cellpadding.both='0';
							table.border.style='none';
							table.option.borderStylesInHTML='true';
						}
						<BODY>
							<ELEMENT_ITER>
								DESCR='Iterate By Actual Facets\n--\nThe iterated elements are produced as the following:\n\n1. First, all facet elements that are declared both in the context simpleType and all its ancestor types (global and anonymous) are collected. (This will work, however, until a derivation by list or union is reached.) \n\nWhat\'s important is that how the factes will follow in the result sequence. Those facets from the same restriction will follow as they were declared. The facets from different restrictions will follow according to the remoteness of their parent restrictions from the context simpleType.\n\nThis everything is determined by the Location Rules (as well as their ordering) specified in "Processing | Iteration Scope" tab.\n\n2. Once the initial sequence is produced, the filtering by key will be applied (see "Processing | Filtering | Filter By Key" tab). The purpose of the filtering is to remove those facets that are overridden in the descendant types.  There are two special cases:\n\n(1) All <xs:enumeration> facets will be removed except the first (valid) one. That will be enough to obtain all valid enumeration facets from the <xs:restriction> parent of the left one. This is done in "facet.tpl" template (called to print a facet value).\n\n(2) All <xs:pattern> facets will be left because they all are valid.\n\nAll those conditions are specified in the "Expression For Unique Key". In the case of <xs:pattern>, the key will be the element ID, which is always unique (therefore, no <xs:pattern> element will be removed.\n\nThe "Preference Condition" expression determines if a given element should replace the already passed element with the same key. That will be so when the expression returns true. We specify to return the value of the facet\'s \'fixed\' attribute. The \'fixed\' attribute overrides anything that might be specified about that facet in the descendant types. (However, actually, doing this is not allowed in XSD!)\n\n3. In the "Processing | Sorting" tab we specify sorting the result facets according to the facet type names. This is done primarily to ensure that all "pattern" facets are printed together.'
								COND='getBooleanParam("doc.comp.attributes.value.restrictions")\n&&\n! isXSPredefinedType (\n  stockSection.getQNameVar("attrTypeQName")\n)'
								CONTEXT_ELEMENT_EXPR='stockSection.getElementVar("attrType")'
								MATCHING_ET='xs:%simpleType'
								FMT={
									sec.spacing.before='4';
									table.cellpadding.both='0';
									table.border.style='none';
									table.option.borderStylesInHTML='true';
								}
								TARGET_ET='xs:%facet'
								SCOPE='advanced-location-rules'
								RULES={
									'xs:%simpleType -> xs:restriction',recursive;
									'xs:restriction -> (xs:%facet|xs:simpleType)',recursive;
									'xs:restriction -> {baseQName = getAttrQNameValue("base");\n(baseQName != null && ! baseQName.isXSPredefinedType()) ? \n{\n  findElementsByKey (\n    "types",\n    hasServiceAttr ("redefined") ?\n      HashKey (baseQName, getServiceAttr ("redefined")) : baseQName\n  )\n}}::xs:simpleType',recursive;
								}
								FILTER_BY_KEY='instanceOf("xs:pattern") ?\n  contextElement.id : contextElement.dsmElement.qName\n'
								FILTER_BY_KEY_COND='getAttrBooleanValue("fixed")'
								SORTING='by-name'
								SORTING_KEY={expr='contextElement.name',ascending}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DATA_CTRL>
														FMT={
															ctrl.size.width='43.5';
															ctrl.size.height='17.3';
															tcell.align.vert='Top';
															par.style='s4';
														}
														FORMULA='name = contextElement.dsmElement.qName.localName;\nname.charAt(0).toUpperCase() + name.substring(1) + \':\''
													</DATA_CTRL>
													<TEMPLATE_CALL_CTRL>
														FMT={
															ctrl.size.width='456';
															ctrl.size.height='17.3';
															tcell.align.vert='Bottom';
															tcell.padding.extra.top='0.5';
														}
														TEMPLATE_FILE='../content/facet.tpl'
														PASSED_PARAMS={
															'facet.annotation','getBooleanParam("doc.comp.attributes.value.restrictions.annotation")';
														}
													</TEMPLATE_CALL_CTRL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
							</ELEMENT_ITER>
							<AREA_SEC>
								COND='hasAttr("default") &&\ngetBooleanParam("doc.comp.attributes.value.default")'
								<AREA>
									<CTRL_GROUP>
										FMT={
											trow.align.vert='Top';
										}
										<CTRLS>
											<LABEL>
												FMT={
													ctrl.size.width='45';
													ctrl.size.height='17.3';
													par.style='s4';
												}
												TEXT='Default:'
											</LABEL>
											<DATA_CTRL>
												FMT={
													ctrl.size.width='454.5';
													ctrl.size.height='17.3';
													text.style='cs4';
													par.style='s5';
												}
												FORMULA='\'"\' + getAttrValue("default") +\'"\''
											</DATA_CTRL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</AREA_SEC>
							<AREA_SEC>
								COND='hasAttr("fixed") &&\ngetBooleanParam("doc.comp.attributes.value.fixed")'
								<AREA>
									<CTRL_GROUP>
										FMT={
											trow.align.vert='Top';
										}
										<CTRLS>
											<LABEL>
												FMT={
													ctrl.size.width='45';
													ctrl.size.height='17.3';
													par.style='s4';
												}
												TEXT='Fixed:'
											</LABEL>
											<DATA_CTRL>
												FMT={
													ctrl.size.width='454.5';
													ctrl.size.height='17.3';
													text.style='cs4';
													par.style='s5';
												}
												FORMULA='\'"\' + getAttrValue("fixed") +\'"\''
											</DATA_CTRL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</AREA_SEC>
						</BODY>
					</FOLDER>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							sec.outputStyle='pars';
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='Attribute Value'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</FOLDER>
			<SS_CALL>
				DESCR='TYPE DETAIL (case of anonymous type)'
				COND='getBooleanParam("doc.comp.attributes.type")'
				CONTEXT_ELEMENT_EXPR='stockSection.getElementVar("attrType")'
				MATCHING_ET='xs:%localSimpleType'
				SS_NAME='Type Detail'
			</SS_CALL>
			<SS_CALL>
				DESCR='XML SOURCE'
				COND='getBooleanParam("doc.comp.attributes.xml")'
				SS_NAME='XML Source'
			</SS_CALL>
			<SS_CALL>
				DESCR='TYPE DETAIL (case of referenced global type)'
				COND='getBooleanParam("doc.comp.attributes.type") &&\nhasParamValue("doc.comp.attributes.type.for.typeDecl", "any") &&\n{\n  type = stockSection.getElementVar("attrType");\n\n  type.instanceOf("xs:simpleType") &&\n    ! isXSPredefinedType(stockSection.getQNameVar("attrTypeQName"))\n}'
				CONTEXT_ELEMENT_EXPR='stockSection.getElementVar("attrType")'
				MATCHING_ET='xs:simpleType'
				SS_NAME='Type Detail'
				PARAMS_EXPR='Array (stockSection.getVar("attrTypeQName"))'
			</SS_CALL>
		</BODY>
	</FOLDER>
	<FOLDER>
		MATCHING_ET='xs:%attribute'
		SS_NAME='Attribute (prohibition)'
		<BODY>
			<FOLDER>
				DESCR='PROFILE'
				COND='getBooleanParam("doc.comp.attributes.profile")'
				FMT={
					sec.outputStyle='table';
					table.cellpadding.both='0';
					table.border.style='none';
				}
				<BODY>
					<AREA_SEC>
						COND='hasAttr("use")'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Use:'
									</LABEL>
									<DATA_CTRL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='17.3';
											par.style='s5';
										}
										ATTR='use'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
			<SS_CALL>
				DESCR='ANNOTATION'
				COND='getBooleanParam("doc.comp.attributes.annotation")'
				FMT={
					sec.spacing.before='8';
					sec.spacing.after='8';
					text.style='cs1';
				}
				SS_NAME='annotation'
			</SS_CALL>
			<SS_CALL>
				DESCR='XML SOURCE (local)'
				COND='getBooleanParam("doc.comp.attributes.xml")'
				SS_NAME='XML Source'
			</SS_CALL>
		</BODY>
	</FOLDER>
	<FOLDER>
		DESCR='params[0]: the schema component where this attribute is defined'
		MATCHING_ET='xs:%attribute'
		INIT_EXPR='// referenced global attribute\n\nglobalAttr = findElementByKey (\n  "global-attributes", getAttrQNameValue("ref")\n);\n\nstockSection.setVar ("globalAttr", globalAttr);\n\n// attribute type\n\ntypeQName = globalAttr.getAttrQNameValue("type");\n\ntype = (typeQName != null)\n       ? findElementByKey ("types", typeQName) \n       : globalAttr.findChild("xs:simpleType");\n\nstockSection.setVar ("attrTypeQName", typeQName);\nstockSection.setVar ("attrType", type);'
		SS_NAME='Attribute (reference)'
		<BODY>
			<FOLDER>
				DESCR='PROFILE'
				COND='getBooleanParam("doc.comp.attributes.profile")'
				FMT={
					sec.outputStyle='table';
					table.cellpadding.both='0';
					table.border.style='none';
				}
				<BODY>
					<AREA_SEC>
						COND='hasParamValue("doc.comp.attributes.profile.form", "any")'
						FMT={
							trow.align.vert='Top';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='43.5';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Form:'
									</LABEL>
									<LABEL>
										FMT={
											ctrl.size.width='456';
											ctrl.size.height='17.3';
											par.style='s5';
										}
										TEXT='namespace-qualified'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='43.5';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Type:'
									</LABEL>
									<SS_CALL_CTRL>
										FMT={
											ctrl.size.width='456';
											ctrl.size.height='17.3';
											par.style='s5';
										}
										SS_NAME='Attribute Type'
										PASSED_ELEMENT_EXPR='stockSection.getElementVar("globalAttr")'
										PASSED_ELEMENT_MATCHING_ET='xs:attribute'
										PARAMS_EXPR='Array (stockSection.getElementVar("attrType"))'
										ALT_FORMULA='"???"'
									</SS_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						COND='hasAttr("use")'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Use:'
									</LABEL>
									<DATA_CTRL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='17.3';
											par.style='s5';
										}
										ATTR='use'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='See "Processing | Context Element" tab'
						COND='getBooleanParam("doc.comp.attributes.profile.default")\n\n// see also "Context Element" tab'
						CONTEXT_ELEMENT_EXPR='hasAttr("default") ? contextElement :\n{\n  globalAttr = stockSection.getElementVar("globalAttr");\n  globalAttr.hasAttr("default") ? globalAttr : null\n}'
						MATCHING_ET='xs:%attribute'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Default:'
									</LABEL>
									<DATA_CTRL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='17.3';
											text.style='cs4';
											par.style='s5';
										}
										FORMULA='\'"\' + getAttrValue("default") +\'"\''
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='See "Processing | Context Element" tab'
						COND='getBooleanParam("doc.comp.attributes.profile.fixed")\n\n// see also "Context Element" tab'
						CONTEXT_ELEMENT_EXPR='globalAttr = stockSection.getElementVar("globalAttr");\nglobalAttr.hasAttr("fixed") ? globalAttr\n  : hasAttr("fixed") ? contextElement : null'
						MATCHING_ET='xs:%attribute'
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='45';
											ctrl.size.height='17.3';
											par.style='s4';
										}
										TEXT='Fixed:'
									</LABEL>
									<DATA_CTRL>
										FMT={
											ctrl.size.width='454.5';
											ctrl.size.height='17.3';
											text.style='cs4';
											par.style='s5';
										}
										FORMULA='\'"\' + getAttrValue("fixed") +\'"\''
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.profile.defined")'
						FMT={
							table.sizing='Relative';
							table.autofit='false';
							table.cellpadding.both='5';
							table.bkgr.color='#F5F5F5';
							table.border.style='solid';
							table.border.color='#999999';
							table.option.borderStylesInHTML='true';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='44.3';
											ctrl.size.height='140.3';
											par.style='s4';
										}
										TEXT='Defined:'
									</LABEL>
									<PANEL>
										FMT={
											ctrl.size.width='455.3';
											ctrl.size.height='140.3';
											par.style='s5';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														<DOC_HLINK>
															COND='stockSection.param.toElement().id != rootElement.id'
															HKEYS={
																'stockSection.contextElement.id';
																'"def"';
															}
														</DOC_HLINK>
														TEXT='by reference'
													</LABEL>
													<LABEL>
														TEXT='within'
													</LABEL>
													<PANEL>
														CONTEXT_ELEMENT_EXPR='stockSection.param.toElement()'
														MATCHING_ETS={'xs:%element';'xs:attributeGroup';'xs:complexType'}
														FMT={
															ctrl.size.width='352.5';
															ctrl.size.height='59.3';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<PANEL>
																		COND='rootElement.id == contextElement.id'
																		FMT={
																			ctrl.size.width='66.8';
																			txtfl.delimiter.type='none';
																		}
																		<AREA>
																			<CTRL_GROUP>
																				<CTRLS>
																					<LABEL>
																						TEXT='('
																					</LABEL>
																					<LABEL>
																						<DOC_HLINK>
																							HKEYS={
																								'contextElement.id';
																								'"detail"';
																							}
																						</DOC_HLINK>
																						TEXT='this'
																					</LABEL>
																					<LABEL>
																						TEXT=')'
																					</LABEL>
																				</CTRLS>
																			</CTRL_GROUP>
																		</AREA>
																	</PANEL>
																	<SS_CALL_CTRL>
																		FMT={
																			ctrl.size.width='118.5';
																			ctrl.size.height='17.3';
																			text.style='cs4';
																		}
																		SS_NAME='XMLName'
																	</SS_CALL_CTRL>
																	<LABEL>
																		MATCHING_ET='xs:%element'
																		TEXT='element'
																	</LABEL>
																	<LABEL>
																		MATCHING_ET='xs:complexType'
																		TEXT='complexType'
																	</LABEL>
																	<LABEL>
																		MATCHING_ET='xs:attributeGroup'
																		TEXT='attributeGroup'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='! getBooleanParam("doc.comp.attributes.xml")\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
														FMT={
															ctrl.size.width='289.5';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<DELIMITER>
																		FMT={
																			txtfl.delimiter.type='text';
																			txtfl.delimiter.text='; ';
																		}
																	</DELIMITER>
																	<LABEL>
																		TEXT='see'
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			HKEYS={
																				'contextElement.id';
																				'"xml-source-location"';
																			}
																		</DOC_HLINK>
																		TEXT='XML source'
																	</LABEL>
																	<PANEL>
																		COND='output.format.supportsPageRefs && \ngetBooleanParam("fmt.page.refs")'
																		FMT={
																			ctrl.size.width='183.8';
																			ctrl.size.height='38.3';
																			txtfl.delimiter.type='none';
																		}
																		<AREA>
																			<CTRL_GROUP>
																				<CTRLS>
																					<DELIMITER>
																						FMT={
																							txtfl.delimiter.type='nbsp';
																						}
																					</DELIMITER>
																					<LABEL>
																						FMT={
																							text.style='cs8';
																						}
																						TEXT='['
																					</LABEL>
																					<DATA_CTRL>
																						FMT={
																							ctrl.option.noHLinkFmt='true';
																							text.style='cs8';
																							text.hlink.fmt='none';
																						}
																						<DOC_HLINK>
																							HKEYS={
																								'contextElement.id';
																								'"xml-source-location"';
																							}
																						</DOC_HLINK>
																						DOCFIELD='page-htarget'
																					</DATA_CTRL>
																					<LABEL>
																						FMT={
																							text.style='cs8';
																						}
																						TEXT=']'
																					</LABEL>
																				</CTRLS>
																			</CTRL_GROUP>
																		</AREA>
																	</PANEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
			<SS_CALL>
				DESCR='ANNOTATION'
				COND='getBooleanParam("doc.comp.attributes.annotation")'
				FMT={
					sec.spacing.before='8';
					sec.spacing.after='8';
					text.style='cs1';
				}
				SS_NAME='annotation'
			</SS_CALL>
			<FOLDER>
				DESCR='ATTRIBUTE VALUE'
				COND='getBooleanParam("doc.comp.attributes.value")'
				FMT={
					sec.spacing.before='8';
				}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.value.model")\n&&\n! isXSPredefinedType (\n  stockSection.getQNameVar("attrTypeQName")\n)'
						CONTEXT_ELEMENT_EXPR='stockSection.getElementVar("attrType")'
						MATCHING_ET='xs:%simpleType'
						FMT={
							sec.outputStyle='table';
							sec.spacing.before='8';
							table.cellpadding.both='4';
							table.bkgr.color='#F5F5F5';
							table.border.style='solid';
							table.border.color='#999999';
							table.page.keepTogether='true';
							table.option.borderStylesInHTML='true';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<TEMPLATE_CALL_CTRL>
										FMT={
											ctrl.size.width='499.5';
											ctrl.size.height='17.3';
											text.style='cs4';
										}
										TEMPLATE_FILE='../content/simpleContentRep.tpl'
										PASSED_PARAMS={
											'abbreviate_enum','getBooleanParam("doc.comp.attributes.value.restrictions")';
										}
									</TEMPLATE_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<FOLDER>
						DESCR='table layout'
						FMT={
							sec.outputStyle='table';
							sec.spacing.before='4';
							table.cellpadding.both='0';
							table.border.style='none';
							table.option.borderStylesInHTML='true';
						}
						<BODY>
							<ELEMENT_ITER>
								DESCR='Iterate By Actual Facets\n--\nSee details in "Attribute (local)" stock-section | "POSSIBLE VALUE" | "Iterate By Actual Facets"'
								COND='getBooleanParam("doc.comp.attributes.value.restrictions")\n&&\n! isXSPredefinedType (\n  stockSection.getQNameVar("attrTypeQName")\n)'
								CONTEXT_ELEMENT_EXPR='stockSection.getElementVar("attrType")'
								MATCHING_ET='xs:%simpleType'
								FMT={
									sec.spacing.before='4';
									table.cellpadding.both='0';
									table.border.style='none';
									table.option.borderStylesInHTML='true';
								}
								TARGET_ET='xs:%facet'
								SCOPE='advanced-location-rules'
								RULES={
									'xs:%simpleType -> xs:restriction',recursive;
									'xs:restriction -> (xs:%facet|xs:simpleType)',recursive;
									'xs:restriction -> {baseQName = getAttrQNameValue("base");\n(baseQName != null && ! baseQName.isXSPredefinedType()) ? \n{\n  findElementsByKey (\n    "types",\n    hasServiceAttr ("redefined") ?\n      HashKey (baseQName, getServiceAttr ("redefined")) : baseQName\n  )\n}}::xs:simpleType',recursive;
								}
								FILTER_BY_KEY='instanceOf("xs:pattern") ?\n  contextElement.id : contextElement.dsmElement.qName\n'
								FILTER_BY_KEY_COND='getAttrBooleanValue("fixed")'
								SORTING='by-name'
								SORTING_KEY={expr='contextElement.name',ascending}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DATA_CTRL>
														FMT={
															ctrl.size.width='43.5';
															ctrl.size.height='17.3';
															tcell.align.vert='Top';
															par.style='s4';
														}
														FORMULA='name = contextElement.dsmElement.qName.localName;\nname.charAt(0).toUpperCase() + name.substring(1) + \':\''
													</DATA_CTRL>
													<TEMPLATE_CALL_CTRL>
														FMT={
															ctrl.size.width='456';
															ctrl.size.height='17.3';
															tcell.align.vert='Bottom';
															tcell.padding.extra.top='0.5';
														}
														TEMPLATE_FILE='../content/facet.tpl'
														PASSED_PARAMS={
															'facet.annotation','getBooleanParam("doc.comp.attributes.value.restrictions.annotation")';
														}
													</TEMPLATE_CALL_CTRL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
							</ELEMENT_ITER>
							<AREA_SEC>
								DESCR='See "Processing | Context Element" tab'
								COND='getBooleanParam("doc.comp.attributes.value.default")\n\n// see also "Context Element" tab'
								CONTEXT_ELEMENT_EXPR='hasAttr("default") ? contextElement :\n{\n  globalAttr = stockSection.getElementVar("globalAttr");\n  globalAttr.hasAttr("default") ? globalAttr : null\n}'
								MATCHING_ET='xs:%attribute'
								<AREA>
									<CTRL_GROUP>
										FMT={
											trow.align.vert='Top';
										}
										<CTRLS>
											<LABEL>
												FMT={
													ctrl.size.width='45';
													ctrl.size.height='17.3';
													par.style='s4';
												}
												TEXT='Default:'
											</LABEL>
											<DATA_CTRL>
												FMT={
													ctrl.size.width='454.5';
													ctrl.size.height='17.3';
													text.style='cs4';
													par.style='s5';
												}
												FORMULA='\'"\' + getAttrValue("default") +\'"\''
											</DATA_CTRL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</AREA_SEC>
							<AREA_SEC>
								DESCR='See "Processing | Context Element" tab'
								COND='getBooleanParam("doc.comp.attributes.value.fixed")\n\n// see also "Context Element" tab'
								CONTEXT_ELEMENT_EXPR='globalAttr = stockSection.getElementVar("globalAttr");\n\nglobalAttr.hasAttr("fixed") ? globalAttr\n  : hasAttr("fixed") ? contextElement : null'
								MATCHING_ET='xs:%attribute'
								<AREA>
									<CTRL_GROUP>
										FMT={
											trow.align.vert='Top';
										}
										<CTRLS>
											<LABEL>
												FMT={
													ctrl.size.width='45';
													ctrl.size.height='17.3';
													par.style='s4';
												}
												TEXT='Fixed:'
											</LABEL>
											<DATA_CTRL>
												FMT={
													ctrl.size.width='454.5';
													ctrl.size.height='17.3';
													text.style='cs4';
													par.style='s5';
												}
												FORMULA='\'"\' + getAttrValue("fixed") +\'"\''
											</DATA_CTRL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</AREA_SEC>
						</BODY>
					</FOLDER>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							sec.outputStyle='pars';
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='Attribute Value'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</FOLDER>
			<SS_CALL>
				DESCR='XML SOURCE (local)'
				COND='getBooleanParam("doc.comp.attributes.xml")'
				SS_NAME='XML Source'
			</SS_CALL>
			<SS_CALL>
				DESCR='TYPE DETAIL'
				COND='getBooleanParam("doc.comp.attributes.type") &&\nhasParamValue("doc.comp.attributes.type.for.attr", "any") &&\n{\n  type = stockSection.getElementVar("attrType");\n\n  type.instanceOf("xs:simpleType") ?\n    hasParamValue("doc.comp.attributes.type.for.typeDecl", "any") &&\n    ! isXSPredefinedType(stockSection.getQNameVar("attrTypeQName"))\n  : true\n}'
				CONTEXT_ELEMENT_EXPR='stockSection.getElementVar("attrType")'
				MATCHING_ET='xs:%simpleType'
				SS_NAME='Type Detail'
				PARAMS_EXPR='Array (stockSection.getVar("attrTypeQName"))'
			</SS_CALL>
		</BODY>
	</FOLDER>
	<FOLDER>
		DESCR='parameter is the schema component where this attribute is defined'
		MATCHING_ET='xs:anyAttribute'
		SS_NAME='Attribute (wildcard)'
		<BODY>
			<FOLDER>
				COND='getBooleanParam("doc.comp.attributes.profile")'
				FMT={
					sec.outputStyle='table';
					table.cellpadding.both='0';
					table.border.style='none';
					table.option.borderStylesInHTML='true';
				}
				<BODY>
					<AREA_SEC>
						COND='getBooleanParam("doc.comp.attributes.profile.defined")'
						FMT={
							table.sizing='Relative';
							table.autofit='false';
							table.cellpadding.both='5';
							table.bkgr.color='#F5F5F5';
							table.border.style='solid';
							table.border.color='#999999';
							table.option.borderStylesInHTML='true';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<LABEL>
										FMT={
											ctrl.size.width='44.3';
											ctrl.size.height='140.3';
											par.style='s4';
										}
										TEXT='Defined:'
									</LABEL>
									<PANEL>
										FMT={
											ctrl.size.width='455.3';
											ctrl.size.height='140.3';
											par.style='s5';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='within'
													</LABEL>
													<PANEL>
														CONTEXT_ELEMENT_EXPR='stockSection.param.toElement()'
														MATCHING_ETS={'xs:%element';'xs:attributeGroup';'xs:complexType'}
														FMT={
															ctrl.size.width='345.8';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<PANEL>
																		COND='rootElement.id == contextElement.id'
																		FMT={
																			ctrl.size.width='66.8';
																			txtfl.delimiter.type='none';
																		}
																		<AREA>
																			<CTRL_GROUP>
																				<CTRLS>
																					<LABEL>
																						TEXT='('
																					</LABEL>
																					<LABEL>
																						<DOC_HLINK>
																							HKEYS={
																								'contextElement.id';
																								'"detail"';
																							}
																						</DOC_HLINK>
																						TEXT='this'
																					</LABEL>
																					<LABEL>
																						TEXT=')'
																					</LABEL>
																				</CTRLS>
																			</CTRL_GROUP>
																		</AREA>
																	</PANEL>
																	<SS_CALL_CTRL>
																		FMT={
																			text.style='cs4';
																		}
																		SS_NAME='XMLName'
																	</SS_CALL_CTRL>
																	<LABEL>
																		MATCHING_ET='xs:%element'
																		TEXT='element'
																	</LABEL>
																	<LABEL>
																		MATCHING_ET='xs:complexType'
																		TEXT='complexType'
																	</LABEL>
																	<LABEL>
																		MATCHING_ET='xs:attributeGroup'
																		TEXT='attributeGroup'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='! getBooleanParam("doc.comp.attributes.xml")\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
														FMT={
															ctrl.size.width='289.5';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<DELIMITER>
																		FMT={
																			txtfl.delimiter.type='text';
																			txtfl.delimiter.text='; ';
																		}
																	</DELIMITER>
																	<LABEL>
																		TEXT='see'
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			HKEYS={
																				'contextElement.id';
																				'"xml-source-location"';
																			}
																		</DOC_HLINK>
																		TEXT='XML source'
																	</LABEL>
																	<PANEL>
																		COND='output.format.supportsPageRefs && \ngetBooleanParam("fmt.page.refs")'
																		FMT={
																			ctrl.size.width='183.8';
																			ctrl.size.height='38.3';
																			txtfl.delimiter.type='none';
																		}
																		<AREA>
																			<CTRL_GROUP>
																				<CTRLS>
																					<DELIMITER>
																						FMT={
																							txtfl.delimiter.type='nbsp';
																						}
																					</DELIMITER>
																					<LABEL>
																						FMT={
																							text.style='cs8';
																						}
																						TEXT='['
																					</LABEL>
																					<DATA_CTRL>
																						FMT={
																							ctrl.option.noHLinkFmt='true';
																							text.style='cs8';
																							text.hlink.fmt='none';
																						}
																						<DOC_HLINK>
																							HKEYS={
																								'contextElement.id';
																								'"xml-source-location"';
																							}
																						</DOC_HLINK>
																						DOCFIELD='page-htarget'
																					</DATA_CTRL>
																					<LABEL>
																						FMT={
																							text.style='cs8';
																						}
																						TEXT=']'
																					</LABEL>
																				</CTRLS>
																			</CTRL_GROUP>
																		</AREA>
																	</PANEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
			<SS_CALL>
				DESCR='ANNOTATION'
				COND='getBooleanParam("doc.comp.attributes.annotation")'
				FMT={
					sec.spacing.before='8';
					sec.spacing.after='8';
					text.style='cs1';
				}
				SS_NAME='annotation'
			</SS_CALL>
			<SS_CALL>
				DESCR='XML SOURCE'
				COND='getBooleanParam("doc.comp.attributes.xml")'
				SS_NAME='XML Source'
			</SS_CALL>
		</BODY>
	</FOLDER>
	<AREA_SEC>
		MATCHING_ET='xs:%attribute'
		FMT={
			par.option.nowrap='true';
		}
		SS_NAME='Attribute Name'
		<AREA>
			<CTRL_GROUP>
				<CTRLS>
					<DATA_CTRL>
						FORMULA='name = getAttrStringValue("name");\nschema = findAncestor ("xs:schema");\n\n(hasAttr("form") ? getAttrValue("form") :\n  schema.getAttrValue ("attributeFormDefault")) == "qualified" \n    ? toXMLName (schema.getAttrStringValue("targetNamespace"), name) : name\n'
					</DATA_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<FOLDER>
		DESCR='context element must be the attribute declaration (not a reference to it);\nparams[0]:  the attribute type element'
		MATCHING_ET='xs:%attribute'
		SS_NAME='Attribute Type'
		<BODY>
			<FOLDER>
				DESCR='when the attribute type is known'
				CONTEXT_ELEMENT_EXPR='stockSection.param.toElement()'
				MATCHING_ET='xs:%simpleType'
				BREAK_PARENT_BLOCK='when-executed'
				<BODY>
					<AREA_SEC>
						DESCR='in case of the global type (specified in \'type\' attribute); see "Component | Context Element" tab'
						MATCHING_ET='xs:simpleType'
						BREAK_PARENT_BLOCK='when-executed'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<SS_CALL_CTRL>
										COND='rootElement.id != contextElement.id'
										FMT={
											text.style='cs4';
										}
										<DOC_HLINK>
											TITLE_EXPR='"simpleType"'
											HKEYS={
												'contextElement.id';
												'"detail"';
											}
										</DOC_HLINK>
										<DOC_HLINK>
											TITLE_EXPR='"simpleType"'
											HKEYS={
												'contextElement.id';
												'"local"';
												'rootElement.id';
											}
										</DOC_HLINK>
										SS_NAME='XMLName'
									</SS_CALL_CTRL>
									<PANEL>
										COND='output.format.supportsPageRefs\n&&\ngetBooleanParam("fmt.page.refs")\n&&\nhyperTargetExists (ArgumentList (\n  contextElement.id,\n  Array ("detail", "xml-source-location")\n))'
										FMT={
											ctrl.size.width='154.5';
											text.style='cs8';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='['
													</LABEL>
													<DATA_CTRL>
														FMT={
															ctrl.option.noHLinkFmt='true';
															text.hlink.fmt='none';
														}
														<DOC_HLINK>
															HKEYS={
																'contextElement.id';
																'Array ("detail", "xml-source-location")',array;
															}
														</DOC_HLINK>
														DOCFIELD='page-htarget'
													</DATA_CTRL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='otherwise, this is the case of an anonymous type'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"local"';
												'rootElement.id';
											}
										</DOC_HLINK>
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'Array ("detail", "xml-source-location")',array;
											}
										</DOC_HLINK>
										TEXT='anonymous'
									</LABEL>
									<TEMPLATE_CALL_CTRL>
										TEMPLATE_FILE='../type/typeDerivationSummary.tpl'
									</TEMPLATE_CALL_CTRL>
									<PANEL>
										COND='output.format.supportsPageRefs\n&&\ngetBooleanParam("fmt.page.refs")\n&&\n(\n  hyperTargetExists (ArgumentList (\n    contextElement.id,\n    "local",\n    rootElement.id\n  )) ||\n  hyperTargetExists (ArgumentList (\n    contextElement.id,\n    Array ("detail", "xml-source-location")\n  ))\n)'
										FMT={
											ctrl.size.width='154.5';
											text.style='cs8';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='['
													</LABEL>
													<DATA_CTRL>
														FMT={
															ctrl.option.noHLinkFmt='true';
															text.hlink.fmt='none';
														}
														<DOC_HLINK>
															HKEYS={
																'contextElement.id';
																'"local"';
																'rootElement.id';
															}
														</DOC_HLINK>
														<DOC_HLINK>
															HKEYS={
																'contextElement.id';
																'Array ("detail", "xml-source-location")',array;
															}
														</DOC_HLINK>
														DOCFIELD='page-htarget'
													</DATA_CTRL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
			<FOLDER>
				DESCR='otherwise, the attribute type is unknown'
				<BODY>
					<AREA_SEC>
						DESCR='when there is a type name specified in the \'type\' attribute'
						COND='getAttrStringValue("type") != ""'
						BREAK_PARENT_BLOCK='when-executed'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										FMT={
											text.style='cs4';
										}
										FORMULA='getAttrQNameValue("type").toXMLName()'
									</DATA_CTRL>
									<DELIMITER>
										FMT={
											txtfl.delimiter.type='text';
											txtfl.delimiter.text=', ';
										}
									</DELIMITER>
									<LABEL>
										COND='isXSPredefinedType (getAttrQNameValue("type"))'
										TEXT='predefined'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='otherwise, no type specified at all -- assume \'xs:anySimpleType\''
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										FMT={
											text.style='cs4';
										}
										FORMULA='toXMLName (getNamespaceURI("xs"), "anySimpleType")'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
		</BODY>
	</FOLDER>
	<FOLDER>
		FMT={
			sec.outputStyle='text-par';
			txtfl.delimiter.type='space';
		}
		SS_NAME='scope'
		<BODY>
			<AREA_SEC>
				DESCR='when inherited attributes are included'
				COND='getBooleanParam("doc.comp.attributes.include.inherited")'
				BREAK_PARENT_BLOCK='when-executed'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								TEXT='('
							</LABEL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='none';
								}
							</DELIMITER>
							<LABEL>
								COND='iterator.numItems == getIntParam("allCount")'
								TEXT='all declarations'
							</LABEL>
							<PANEL>
								COND='iterator.numItems != getIntParam("allCount")'
								FMT={
									ctrl.size.width='223.5';
									ctrl.size.height='38.3';
								}
								<AREA>
									<CTRL_GROUP>
										FMT={
											txtfl.delimiter.type='text';
											txtfl.delimiter.text=', ';
										}
										<CTRLS>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.local")'
												TEXT='local attributes'
											</LABEL>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.references")'
												TEXT='references'
											</LABEL>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.wildcard")'
												TEXT='wildcard'
											</LABEL>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.prohibitions")'
												TEXT='prohibitions'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='text';
									txtfl.delimiter.text='; ';
								}
							</DELIMITER>
							<DATA_CTRL>
								FORMULA='iterator.numItems'
							</DATA_CTRL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='text';
									txtfl.delimiter.text='/';
								}
							</DELIMITER>
							<DATA_CTRL>
								COND='iterator.numItems < getIntParam("allCount")'
								FORMULA='getIntParam("allCount")'
							</DATA_CTRL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='none';
								}
							</DELIMITER>
							<LABEL>
								TEXT=')'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<AREA_SEC>
				DESCR='otherwise, specified in this component only'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								TEXT='('
							</LABEL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='none';
								}
							</DELIMITER>
							<LABEL>
								COND='iterator.numItems == getIntParam("ownCount")'
								TEXT='all declarations'
							</LABEL>
							<PANEL>
								COND='iterator.numItems != getIntParam("ownCount")'
								FMT={
									ctrl.size.width='223.5';
									ctrl.size.height='38.3';
								}
								<AREA>
									<CTRL_GROUP>
										FMT={
											txtfl.delimiter.type='text';
											txtfl.delimiter.text=', ';
										}
										<CTRLS>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.local")'
												TEXT='local attributes'
											</LABEL>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.references")'
												TEXT='references'
											</LABEL>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.wildcard")'
												TEXT='wildcard'
											</LABEL>
											<LABEL>
												COND='getBooleanParam("doc.comp.attributes.include.prohibitions")'
												TEXT='prohibitions'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='text';
									txtfl.delimiter.text='; ';
								}
							</DELIMITER>
							<LABEL>
								TEXT='defined in'
							</LABEL>
							<LABEL>
								<DOC_HLINK>
									HKEYS={
										'contextElement.id';
										'"detail"';
									}
								</DOC_HLINK>
								TEXT='this'
							</LABEL>
							<LABEL>
								TEXT='component only'
							</LABEL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='text';
									txtfl.delimiter.text='; ';
								}
							</DELIMITER>
							<DATA_CTRL>
								FORMULA='iterator.numItems'
							</DATA_CTRL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='text';
									txtfl.delimiter.text='/';
								}
							</DELIMITER>
							<DATA_CTRL>
								FORMULA='getIntParam("allCount")'
							</DATA_CTRL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='none';
								}
							</DELIMITER>
							<LABEL>
								TEXT=')'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</BODY>
	</FOLDER>
	<FOLDER>
		DESCR='params[0]: type QName in case of a global type'
		MATCHING_ET='xs:%simpleType'
		<HTARGET>
			HKEYS={
				'contextElement.id';
				'"local"';
				'rootElement.id';
			}
		</HTARGET>
		SS_NAME='Type Detail'
		<BODY>
			<AREA_SEC>
				COND='getBooleanParam("doc.comp.attributes.type.deriv.tree")'
				FMT={
					sec.outputStyle='table';
					sec.spacing.before='8';
					sec.spacing.after='6';
					text.font.size='9';
					table.cellpadding.both='4';
					table.bkgr.color='#F5F5F5';
					table.border.style='solid';
					table.border.color='#999999';
					table.page.keepTogether='true';
					table.option.borderStylesInHTML='true';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<TEMPLATE_CALL_CTRL>
								FMT={
									ctrl.size.width='499.5';
									ctrl.size.height='17.3';
								}
								TEMPLATE_FILE='../type/typeDerivationTree.tpl'
								PASSED_PARAMS={
									'detail_link','true';
									'xml_source_link','instanceOf("xs:simpleType") ||\n! getBooleanParam("doc.comp.attributes.xml")';
								}
							</TEMPLATE_CALL_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<SS_CALL>
				COND='getBooleanParam("doc.comp.attributes.type.annotation")'
				FMT={
					sec.spacing.before='8';
					sec.spacing.after='6';
					text.style='cs2';
				}
				SS_NAME='annotation'
			</SS_CALL>
			<TEMPLATE_CALL>
				COND='! hasParamValue("doc.comp.attributes.type.deriv.simpleContent", "none")'
				TEMPLATE_FILE='../content/simpleContentDerivation.tpl'
				PASSED_PARAMS={
					'deriv.simpleContent','getStringParam("doc.comp.attributes.type.deriv.simpleContent")';
					'deriv.simpleContent.facets','getBooleanParam("doc.comp.attributes.type.deriv.simpleContent.facets")';
					'deriv.simpleContent.annotations','getBooleanParam("doc.comp.attributes.type.deriv.simpleContent.annotations")';
				}
			</TEMPLATE_CALL>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s2';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								MATCHING_ET='xs:%localSimpleType'
								TEXT='Anonymous'
							</LABEL>
							<DATA_CTRL>
								MATCHING_ET='xs:simpleType'
								FORMULA='\'"\' + stockSection.param + \'"\''
							</DATA_CTRL>
							<LABEL>
								TEXT='simpleType'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<FOLDER>
		SS_NAME='XML Source'
		<BODY>
			<AREA_SEC>
				COND='getBooleanParam("doc.comp.attributes.xml.box")'
				FMT={
					sec.outputStyle='table';
					sec.spacing.before='8';
					sec.spacing.after='10';
					table.cellpadding.both='4';
					table.bkgr.color='#F5F5F5';
					table.border.style='solid';
					table.border.color='#999999';
					table.option.borderStylesInHTML='true';
				}
				BREAK_PARENT_BLOCK='when-executed'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<TEMPLATE_CALL_CTRL>
								FMT={
									ctrl.size.width='499.5';
									ctrl.size.height='17.3';
								}
								TEMPLATE_FILE='../xml/nodeSource.tpl'
								PASSED_PARAMS={
									'remove.anns','getBooleanParam("doc.comp.attributes.xml.remove.anns")';
								}
							</TEMPLATE_CALL_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<TEMPLATE_CALL>
				FMT={
					sec.spacing.before='6';
					sec.spacing.after='10';
				}
				TEMPLATE_FILE='../xml/nodeSource.tpl'
				PASSED_PARAMS={
					'remove.anns','getBooleanParam("doc.comp.attributes.xml.remove.anns")';
				}
			</TEMPLATE_CALL>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s2';
				}
				<AREA>
					<CTRL_GROUP>
						FMT={
							txtfl.delimiter.type='none';
						}
						<CTRLS>
							<LABEL>
								TEXT='XML Source'
							</LABEL>
							<DELIMITER>
								FMT={
									text.style='cs4';
									text.color.opaque='false';
								}
							</DELIMITER>
							<TEMPLATE_CALL_CTRL>
								FMT={
									text.style='cs7';
									text.color.opaque='false';
								}
								TEMPLATE_FILE='../xml/sourceNote.tpl'
								PASSED_PARAMS={
									'remove.anns','getBooleanParam("doc.comp.attributes.xml.remove.anns")';
								}
							</TEMPLATE_CALL_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<FOLDER>
		DESCR='prints the XML (qualified or local) name of any global schema component and local element (passed as the stock-section context element)'
		FMT={
			sec.outputStyle='text-par';
		}
		SS_NAME='XMLName'
		<BODY>
			<AREA_SEC>
				DESCR='case of a global element or global complexType'
				MATCHING_ETS={'xs:complexType';'xs:element'}
				FMT={
					par.option.nowrap='true';
				}
				BREAK_PARENT_BLOCK='when-executed'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<DATA_CTRL>
								COND='! getAttrBooleanValue ("abstract")'
								<DOC_HLINK>
									TITLE_EXPR='instanceOf ("xs:element") ? "global element" : "complexType"'
									HKEYS={
										'contextElement.id';
										'Array ("detail", "xml-source-location")',array;
									}
								</DOC_HLINK>
								FORMULA='toXMLName (\n  findAncestor("xs:schema").getAttrStringValue("targetNamespace"), \n  getAttrStringValue("name"),\n  Enum (rootElement, contextElement)\n)'
							</DATA_CTRL>
							<DATA_CTRL>
								COND='getAttrBooleanValue ("abstract")'
								FMT={
									text.font.style.italic='true';
								}
								<DOC_HLINK>
									TITLE_EXPR='instanceOf ("xs:element") ?\n  "abstract global element" : "abstract complexType"'
									HKEYS={
										'contextElement.id';
										'Array ("detail", "xml-source-location")',array;
									}
								</DOC_HLINK>
								FORMULA='toXMLName (\n  findAncestor("xs:schema").getAttrStringValue("targetNamespace"), \n  getAttrStringValue("name"),\n  Enum (rootElement, contextElement)\n)'
							</DATA_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<AREA_SEC>
				DESCR='case of a local element'
				MATCHING_ET='xs:%localElement'
				FMT={
					txtfl.delimiter.type='none';
				}
				BREAK_PARENT_BLOCK='when-executed'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<DATA_CTRL>
								<DOC_HLINK>
									TITLE_EXPR='"local element"'
									HKEYS={
										'contextElement.id';
										'Array ("detail", "def", "xml-source-location")',array;
									}
								</DOC_HLINK>
								FORMULA='name = getAttrStringValue("name");\nschema = findAncestor ("xs:schema");\n\n(hasAttr("form") ? getAttrValue("form") :\n  schema.getAttrValue ("elementFormDefault")) == "qualified" \n    ? toXMLName (schema.getAttrStringValue("targetNamespace"), name) : name'
							</DATA_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<AREA_SEC>
				DESCR='any other (global) component'
				FMT={
					txtfl.delimiter.type='none';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<DATA_CTRL>
								<DOC_HLINK>
									TITLE_EXPR='instanceOf ("xs:simpleType") ? "simpleType" : \n  instanceOf ("xs:group") ? "group" : \n    instanceOf ("xs:attributeGroup") ? "attributeGroup" : \n      instanceOf ("xs:attribute") ? "global attribute" : ""'
									HKEYS={
										'contextElement.id';
										'Array ("detail", "xml-source-location")',array;
									}
								</DOC_HLINK>
								FORMULA='toXMLName (\n  findAncestor("xs:schema").getAttrStringValue("targetNamespace"), \n  getAttrStringValue("name"),\n  Enum (rootElement, contextElement)\n)'
							</DATA_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</BODY>
	</FOLDER>
</STOCK_SECTIONS>
CHECKSUM='+OQG+wyHbkL0RgqbULp0c9XUhNfIJLsiva04v7RvVUE'
</DOCFLEX_TEMPLATE>