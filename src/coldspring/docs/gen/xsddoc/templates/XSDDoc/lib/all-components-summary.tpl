<DOCFLEX_TEMPLATE VER='1.13'>
CREATED='2008-11-27 11:31:09'
LAST_UPDATE='2009-10-30 06:36:29'
DESIGNER_TOOL='DocFlex SDK 1.x'
DESIGNER_LICENSE_TYPE='Filigris Works Team'
APP_ID='docflex-xml-xsddoc2'
APP_NAME='DocFlex/XML XSDDoc'
APP_VER='2.2.0'
APP_AUTHOR='Copyright \u00a9 2005-2009 Filigris Works,\nLeonid Rudy Softwareprodukte. All rights reserved.'
TEMPLATE_TYPE='DocumentTemplate'
DSM_TYPE_ID='xsddoc'
ROOT_ETS={'#DOCUMENTS';'xs:schema'}
<TEMPLATE_PARAMS>
	PARAM={
		param.name='scope';
		param.description='Indicates the scope of the main document for which this template is called:\n"any" - unspecified;\n"namespace" - namespace overview;\n"schema" - schema overview';
		param.type='enum';
		param.enum.values='any;namespace;schema';
	}
	PARAM={
		param.name='page.heading.left';
		param.title='Page Heading (on the left)';
		param.type='string';
		param.default.value='All Components';
	}
	PARAM={
		param.name='gen.doc.for.schemas';
		param.title='For Schemas';
		param.title.style.italic='true';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
	}
	PARAM={
		param.name='gen.doc.for.schemas.initial';
		param.title='Initial';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='gen.doc.for.schemas.imported';
		param.title='Imported';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='gen.doc.for.schemas.included';
		param.title='Included';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='gen.doc.for.schemas.redefined';
		param.title='Redefined';
		param.title.style.italic='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps';
		param.title='All Components Summary';
		param.title.style.bold='true';
		param.description='Specifies if the <b><i>Namespace Overview</i></b> documentation should be generated for each namespace.\n<p>\n<b>Nested Parameter Group:</b>\n<dl><dd>\nControls what is included in the <i>Namespace Overview</i> documentation.\n</dd></dl>';
		param.grouping='true';
	}
	PARAM={
		param.name='doc.allcomps.item';
		param.title='Summary Item';
		param.title.style.italic='true';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
	}
	PARAM={
		param.name='doc.allcomps.item.annotation';
		param.title='Annotation';
		param.featureType='pro';
		param.type='enum';
		param.enum.values='first_sentence;full;none';
	}
	PARAM={
		param.name='doc.allcomps.item.profile';
		param.title='Component Profile';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.namespace';
		param.title='Namespace';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.type';
		param.title='Type';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.content';
		param.title='Content';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.abstract';
		param.title='Abstract';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.block';
		param.title='Block';
		param.featureType='pro';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='enum';
		param.enum.values='any;non_default;none';
		param.enum.displayValues='any;non-default only;none';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.block.value';
		param.title='Value';
		param.featureType='pro';
		param.type='boolean';
		param.default.value='true';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.block.meaning';
		param.title='Meaning';
		param.featureType='pro';
		param.type='boolean';
		param.default.value='true';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.final';
		param.title='Final';
		param.featureType='pro';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='enum';
		param.enum.values='any;non_default;none';
		param.enum.displayValues='any;non-default only;none';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.final.value';
		param.title='Value';
		param.featureType='pro';
		param.type='boolean';
		param.default.value='true';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.final.meaning';
		param.title='Meaning';
		param.featureType='pro';
		param.type='boolean';
		param.default.value='true';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.subst';
		param.title='Subst.Gr';
		param.grouping='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.subst.heads';
		param.title='List of group heads';
		param.featureType='pro';
		param.type='boolean';
		param.default.value='true';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.subst.members';
		param.title='List of group members';
		param.featureType='pro';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.nillable';
		param.title='Nillable';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.defined';
		param.title='Defined';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.includes';
		param.title='Includes';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.redefines';
		param.title='Redefines';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.redefined';
		param.title='Redefined';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.item.profile.used';
		param.title='Used';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.elements';
		param.title='Elements';
		param.grouping='true';
		param.grouping.defaultState='collapsed';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.elements.local';
		param.title='Local Elements';
		param.type='enum';
		param.enum.values='all;complexType;none';
	}
	PARAM={
		param.name='doc.allcomps.complexTypes';
		param.title='Complex Types';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.simpleTypes';
		param.title='Simple Types';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.groups';
		param.title='Element Groups';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.attributes';
		param.title='Global Attributes';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.allcomps.attributeGroups';
		param.title='Attribute Groups';
		param.type='boolean';
	}
	PARAM={
		param.name='show';
		param.title='Show';
		param.title.style.bold='true';
		param.grouping='true';
	}
	PARAM={
		param.name='show.about';
		param.title='About (footer)';
		param.type='enum';
		param.enum.values='full;short;none';
	}
	PARAM={
		param.name='fmt.page';
		param.title='Pagination';
		param.title.style.bold='true';
		param.grouping='true';
	}
	PARAM={
		param.name='fmt.page.columns';
		param.title='Generate page columns';
		param.type='boolean';
	}
</TEMPLATE_PARAMS>
FMT={
	doc.lengthUnits='pt';
	doc.hlink.style.link='cs2';
}
<STYLES>
	CHAR_STYLE={
		style.name='Default Paragraph Font';
		style.id='cs1';
		style.default='true';
	}
	CHAR_STYLE={
		style.name='Hyperlink';
		style.id='cs2';
		text.decor.underline='true';
		text.color.foreground='#0000FF';
	}
	PAR_STYLE={
		style.name='Main Heading';
		style.id='s1';
		text.font.name='Verdana';
		text.font.size='13';
		text.font.style.bold='true';
		text.color.foreground='#4477AA';
		par.bkgr.opaque='true';
		par.bkgr.color='#EEEEEE';
		par.border.style='solid';
		par.border.color='#4477AA';
		par.margin.top='0';
		par.margin.bottom='9';
		par.padding.left='5';
		par.padding.right='5';
		par.padding.top='3';
		par.padding.bottom='3';
		par.page.keepTogether='true';
		par.page.keepWithNext='true';
	}
	PAR_STYLE={
		style.name='Normal';
		style.id='s2';
		style.default='true';
	}
	CHAR_STYLE={
		style.name='Normal Smaller';
		style.id='cs3';
		text.font.name='Arial';
		text.font.size='9';
	}
	CHAR_STYLE={
		style.name='Page Header Font';
		style.id='cs4';
		text.font.name='Arial';
		text.font.style.italic='true';
	}
	CHAR_STYLE={
		style.name='Page Number';
		style.id='cs5';
		text.font.size='9';
	}
	PAR_STYLE={
		style.name='Profile Subheading';
		style.id='s3';
		text.font.name='Arial';
		text.font.size='9';
		text.font.style.bold='true';
	}
	CHAR_STYLE={
		style.name='Summary Heading Font';
		style.id='cs6';
		text.font.size='12';
		text.font.style.bold='true';
	}
</STYLES>
<PAGE_HEADER>
	<AREA_SEC>
		FMT={
			text.style='cs4';
			table.cellpadding.both='0';
			table.border.style='none';
			table.border.bottom.style='solid';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					par.border.bottom.style='solid';
				}
				<CTRLS>
					<DATA_CTRL>
						FORMULA='getStringParam("page.heading.left")'
					</DATA_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
</PAGE_HEADER>
<ROOT>
	<AREA_SEC>
		FMT={
			par.style='s1';
		}
		<AREA>
			<CTRL_GROUP>
				<CTRLS>
					<LABEL>
						TEXT='All Component Summary'
					</LABEL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<FOLDER>
		DESCR='all documented components'
		FMT={
			sec.spacing.before='12';
		}
		<BODY>
			<AREA_SEC>
				FMT={
					sec.outputStyle='text-par';
					sec.indent.block='true';
					text.style='cs3';
					txtfl.delimiter.type='text';
					txtfl.delimiter.text=', ';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<PANEL>
								COND='getBooleanParam("doc.allcomps.elements") ?\n{\n  count = countElementsByLPath (\n    \'#DOCUMENT [\n       hasAttr ("initial") &&\n       getBooleanParam("gen.doc.for.schemas.initial")\n       ||\n       hasAttr ("imported") &&\n       getBooleanParam("gen.doc.for.schemas.imported")\n       ||\n       hasAttr ("included") &&\n       getBooleanParam("gen.doc.for.schemas.included")\n       ||\n       hasAttr ("redefined") &&\n       getBooleanParam("gen.doc.for.schemas.redefined")\n     ] / xs:schema / xs:element\'\n  );\n\n  count > 0 ? { setVar ("count", count); true } : false\n\n} : false'
								FMT={
									ctrl.size.width='197.3';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'"all-element-summary"';
													}
												</DOC_HLINK>
												TEXT='global element'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'"all-element-summary"';
													}
												</DOC_HLINK>
												TEXT='global elements'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='getBooleanParam("doc.allcomps.elements") ?\n{\n  count = countElementsByLPath (\n\n    \'#DOCUMENT [\n       hasAttr ("initial") &&\n       getBooleanParam("gen.doc.for.schemas.initial")\n       ||\n       hasAttr ("imported") &&\n       getBooleanParam("gen.doc.for.schemas.imported")\n       ||\n       hasAttr ("included") &&\n       getBooleanParam("gen.doc.for.schemas.included")\n       ||\n       hasAttr ("redefined") &&\n       getBooleanParam("gen.doc.for.schemas.redefined")\n     ] / xs:schema / descendant::xs:%localElement\',\n\n    BooleanQuery (\n      ! hasAttr("ref") &&\n      {\n        local = getStringParam("doc.allcomps.elements.local");\n  \n        local == "complexType" ?\n          ((typeQName = getAttrQNameValue("type")) != null) ?\n            findElementByKey ("types", typeQName).instanceOf("xs:complexType")\n          : hasChild("xs:complexType")\n        :\n        local == "all"\n      }\n    ),\n\n    FlexQuery (\n      (typeQName = getAttrQNameValue("type")) != null ?\n      {\n        schema = findAncestor ("xs:schema");\n\n        HashKey (\n          ((hasAttr("form") ? getAttrValue("form") :\n             schema.getAttrValue ("elementFormDefault")) == "qualified" \n               ? schema.getAttrStringValue("targetNamespace") : ""),\n          getAttrStringValue("name"),\n          typeQName\n        )\n      } : contextElement.id\n    )\n  );\n\n  count > 0 ? { setVar ("count", count); true } : false\n\n} : false'
								FMT={
									ctrl.size.width='189';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'"all-element-summary"';
													}
												</DOC_HLINK>
												TEXT='local element'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'"all-element-summary"';
													}
												</DOC_HLINK>
												TEXT='local elements'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='getBooleanParam("doc.allcomps.complexTypes") ?\n{\n  count = countElementsByLPath (\n    \'#DOCUMENT [\n       hasAttr ("initial") &&\n       getBooleanParam("gen.doc.for.schemas.initial")\n       ||\n       hasAttr ("imported") &&\n       getBooleanParam("gen.doc.for.schemas.imported")\n       ||\n       hasAttr ("included") &&\n       getBooleanParam("gen.doc.for.schemas.included")\n       ||\n       hasAttr ("redefined") &&\n       getBooleanParam("gen.doc.for.schemas.redefined")\n     ] / xs:schema / descendant::xs:complexType\'\n  );\n\n  count > 0 ? { setVar ("count", count); true } : false\n\n} : false'
								FMT={
									ctrl.size.width='190.5';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'"all-complexType-summary"';
													}
												</DOC_HLINK>
												TEXT='complexType'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'"all-complexType-summary"';
													}
												</DOC_HLINK>
												TEXT='complexTypes'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='getBooleanParam("doc.allcomps.simpleTypes") ?\n{\n  count = countElementsByLPath (\n    \'#DOCUMENT [\n       hasAttr ("initial") &&\n       getBooleanParam("gen.doc.for.schemas.initial")\n       ||\n       hasAttr ("imported") &&\n       getBooleanParam("gen.doc.for.schemas.imported")\n       ||\n       hasAttr ("included") &&\n       getBooleanParam("gen.doc.for.schemas.included")\n       ||\n       hasAttr ("redefined") &&\n       getBooleanParam("gen.doc.for.schemas.redefined")\n     ] / xs:schema / descendant::xs:simpleType\'\n  );\n\n  count > 0 ? { setVar ("count", count); true } : false\n\n} : false'
								FMT={
									ctrl.size.width='177.8';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'"all-simpleType-summary"';
													}
												</DOC_HLINK>
												TEXT='simpleType'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'"all-simpleType-summary"';
													}
												</DOC_HLINK>
												TEXT='simpleTypes'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='getBooleanParam("doc.allcomps.groups") ?\n{\n  count = countElementsByLPath (\n    \'#DOCUMENT [\n       hasAttr ("initial") &&\n       getBooleanParam("gen.doc.for.schemas.initial")\n       ||\n       hasAttr ("imported") &&\n       getBooleanParam("gen.doc.for.schemas.imported")\n       ||\n       hasAttr ("included") &&\n       getBooleanParam("gen.doc.for.schemas.included")\n       ||\n       hasAttr ("redefined") &&\n       getBooleanParam("gen.doc.for.schemas.redefined")\n     ] / xs:schema / descendant::xs:group\'\n  );\n\n  count > 0 ? { setVar ("count", count); true } : false\n\n} : false'
								FMT={
									ctrl.size.width='194.3';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'"all-group-summary"';
													}
												</DOC_HLINK>
												TEXT='element group'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'"all-group-summary"';
													}
												</DOC_HLINK>
												TEXT='element groups'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='getBooleanParam("doc.allcomps.attributes") ?\n{\n  count = countElementsByLPath (\n    \'#DOCUMENT [\n       hasAttr ("initial") &&\n       getBooleanParam("gen.doc.for.schemas.initial")\n       ||\n       hasAttr ("imported") &&\n       getBooleanParam("gen.doc.for.schemas.imported")\n       ||\n       hasAttr ("included") &&\n       getBooleanParam("gen.doc.for.schemas.included")\n       ||\n       hasAttr ("redefined") &&\n       getBooleanParam("gen.doc.for.schemas.redefined")\n     ] / xs:schema / xs:attribute\'\n  );\n\n  count > 0 ? { setVar ("count", count); true } : false\n\n} : false'
								FMT={
									ctrl.size.width='198';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'"all-attribute-summary"';
													}
												</DOC_HLINK>
												TEXT='global attribute'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'"all-attribute-summary"';
													}
												</DOC_HLINK>
												TEXT='global attributes'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='getBooleanParam("doc.allcomps.attributeGroups") ?\n{\n  count = countElementsByLPath (\n    \'#DOCUMENT [\n       hasAttr ("initial") &&\n       getBooleanParam("gen.doc.for.schemas.initial")\n       ||\n       hasAttr ("imported") &&\n       getBooleanParam("gen.doc.for.schemas.imported")\n       ||\n       hasAttr ("included") &&\n       getBooleanParam("gen.doc.for.schemas.included")\n       ||\n       hasAttr ("redefined") &&\n       getBooleanParam("gen.doc.for.schemas.redefined")\n     ] / xs:schema / descendant::xs:attributeGroup\'\n  );\n\n  count > 0 ? { setVar ("count", count); true } : false\n\n} : false'
								FMT={
									ctrl.size.width='196.5';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'"all-attributeGroup-summary"';
													}
												</DOC_HLINK>
												TEXT='attribute group'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'"all-attributeGroup-summary"';
													}
												</DOC_HLINK>
												TEXT='attribute groups'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s3';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								TEXT='Components:'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<TEMPLATE_CALL>
		DESCR='elements'
		COND='getBooleanParam("doc.allcomps.elements")'
		FMT={
			sec.spacing.before='12';
		}
		<HTARGET>
			HKEYS={
				'"all-element-summary"';
			}
		</HTARGET>
		TEMPLATE_FILE='element/elementSummary.tpl'
		PASSED_PARAMS={
			'elements.local','getStringParam("doc.allcomps.elements.local")';
			'item.annotation','getStringParam("doc.allcomps.item.annotation")';
			'doc.comp.profile','getBooleanParam("doc.allcomps.item.profile")';
			'doc.comp.profile.namespace','getBooleanParam("doc.allcomps.item.profile.namespace")';
			'doc.comp.profile.type','getBooleanParam("doc.allcomps.item.profile.type")';
			'doc.comp.profile.content','getBooleanParam("doc.allcomps.item.profile.content")';
			'doc.comp.profile.abstract','getBooleanParam("doc.allcomps.item.profile.abstract")';
			'doc.comp.profile.block','getStringParam("doc.allcomps.item.profile.block")';
			'doc.comp.profile.block.value','getBooleanParam("doc.allcomps.item.profile.block.value")';
			'doc.comp.profile.block.meaning','getBooleanParam("doc.allcomps.item.profile.block.meaning")';
			'doc.comp.profile.final','getStringParam("doc.allcomps.item.profile.final")';
			'doc.comp.profile.final.value','getBooleanParam("doc.allcomps.item.profile.final.value")';
			'doc.comp.profile.final.meaning','getBooleanParam("doc.allcomps.item.profile.final.meaning")';
			'doc.comp.profile.subst','getBooleanParam("doc.allcomps.item.profile.subst")';
			'doc.comp.profile.subst.heads','getBooleanParam("doc.allcomps.item.profile.subst.heads")';
			'doc.comp.profile.subst.members','getBooleanParam("doc.allcomps.item.profile.subst.members")';
			'doc.comp.profile.nillable','getBooleanParam("doc.allcomps.item.profile.nillable")';
			'doc.comp.profile.defined','getBooleanParam("doc.allcomps.item.profile.defined")';
			'doc.comp.profile.includes','getBooleanParam("doc.allcomps.item.profile.includes")';
			'doc.comp.profile.used','getBooleanParam("doc.allcomps.item.profile.used")';
		}
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='complexTypes'
		COND='getBooleanParam("doc.allcomps.complexTypes")'
		FMT={
			sec.spacing.before='12';
		}
		<HTARGET>
			HKEYS={
				'"all-complexType-summary"';
			}
		</HTARGET>
		TEMPLATE_FILE='type/complexTypeSummary.tpl'
		PASSED_PARAMS={
			'item.annotation','getStringParam("doc.allcomps.item.annotation")';
			'doc.comp.profile','getBooleanParam("doc.allcomps.item.profile")';
			'doc.comp.profile.namespace','getBooleanParam("doc.allcomps.item.profile.namespace")';
			'doc.comp.profile.content','getBooleanParam("doc.allcomps.item.profile.content")';
			'doc.comp.profile.abstract','getBooleanParam("doc.allcomps.item.profile.abstract")';
			'doc.comp.profile.block','getStringParam("doc.allcomps.item.profile.block")';
			'doc.comp.profile.block.value','getBooleanParam("doc.allcomps.item.profile.block.value")';
			'doc.comp.profile.block.meaning','getBooleanParam("doc.allcomps.item.profile.block.meaning")';
			'doc.comp.profile.final','getStringParam("doc.allcomps.item.profile.final")';
			'doc.comp.profile.final.value','getBooleanParam("doc.allcomps.item.profile.final.value")';
			'doc.comp.profile.final.meaning','getBooleanParam("doc.allcomps.item.profile.final.meaning")';
			'doc.comp.profile.defined','getBooleanParam("doc.allcomps.item.profile.defined")';
			'doc.comp.profile.includes','getBooleanParam("doc.allcomps.item.profile.includes")';
			'doc.comp.profile.redefines','getBooleanParam("doc.allcomps.item.profile.redefines")';
			'doc.comp.profile.redefined','getBooleanParam("doc.allcomps.item.profile.redefined")';
			'doc.comp.profile.used','getBooleanParam("doc.allcomps.item.profile.used")';
		}
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='simpleTypes'
		COND='getBooleanParam("doc.allcomps.simpleTypes")'
		FMT={
			sec.spacing.before='12';
		}
		<HTARGET>
			HKEYS={
				'"all-simpleType-summary"';
			}
		</HTARGET>
		TEMPLATE_FILE='type/simpleTypeSummary.tpl'
		PASSED_PARAMS={
			'item.annotation','getStringParam("doc.allcomps.item.annotation")';
			'doc.comp.profile','getBooleanParam("doc.allcomps.item.profile")';
			'doc.comp.profile.namespace','getBooleanParam("doc.allcomps.item.profile.namespace")';
			'doc.comp.profile.content','getBooleanParam("doc.allcomps.item.profile.content")';
			'doc.comp.profile.final','getStringParam("doc.allcomps.item.profile.final")';
			'doc.comp.profile.final.value','getBooleanParam("doc.allcomps.item.profile.final.value")';
			'doc.comp.profile.final.meaning','getBooleanParam("doc.allcomps.item.profile.final.meaning")';
			'doc.comp.profile.defined','getBooleanParam("doc.allcomps.item.profile.defined")';
			'doc.comp.profile.redefines','getBooleanParam("doc.allcomps.item.profile.redefines")';
			'doc.comp.profile.redefined','getBooleanParam("doc.allcomps.item.profile.redefined")';
			'doc.comp.profile.used','getBooleanParam("doc.allcomps.item.profile.used")';
		}
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='element groups'
		COND='getBooleanParam("doc.allcomps.groups")'
		FMT={
			sec.spacing.before='12';
		}
		<HTARGET>
			HKEYS={
				'"all-group-summary"';
			}
		</HTARGET>
		TEMPLATE_FILE='groups/groupSummary.tpl'
		PASSED_PARAMS={
			'item.annotation','getStringParam("doc.allcomps.item.annotation")';
			'doc.comp.profile','getBooleanParam("doc.allcomps.item.profile")';
			'doc.comp.profile.namespace','getBooleanParam("doc.allcomps.item.profile.namespace")';
			'doc.comp.profile.content','getBooleanParam("doc.allcomps.item.profile.content")';
			'doc.comp.profile.defined','getBooleanParam("doc.allcomps.item.profile.defined")';
			'doc.comp.profile.includes','getBooleanParam("doc.allcomps.item.profile.includes")';
			'doc.comp.profile.redefines','getBooleanParam("doc.allcomps.item.profile.redefines")';
			'doc.comp.profile.redefined','getBooleanParam("doc.allcomps.item.profile.redefined")';
			'doc.comp.profile.used','getBooleanParam("doc.allcomps.item.profile.used")';
		}
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='attributes'
		COND='getBooleanParam("doc.allcomps.attributes")'
		FMT={
			sec.spacing.before='12';
		}
		<HTARGET>
			HKEYS={
				'"all-attribute-summary"';
			}
		</HTARGET>
		TEMPLATE_FILE='attribute/attributeSummary.tpl'
		PASSED_PARAMS={
			'item.annotation','getStringParam("doc.allcomps.item.annotation")';
			'doc.comp.profile','getBooleanParam("doc.allcomps.item.profile")';
			'doc.comp.profile.namespace','getBooleanParam("doc.allcomps.item.profile.namespace")';
			'doc.comp.profile.type','getBooleanParam("doc.allcomps.item.profile.type")';
			'doc.comp.profile.defined','getBooleanParam("doc.allcomps.item.profile.defined")';
			'doc.comp.profile.used','getBooleanParam("doc.allcomps.item.profile.used")';
		}
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='attribute groups'
		COND='getBooleanParam("doc.allcomps.attributeGroups")'
		FMT={
			sec.spacing.before='12';
		}
		<HTARGET>
			HKEYS={
				'"all-attributeGroup-summary"';
			}
		</HTARGET>
		TEMPLATE_FILE='groups/attributeGroupSummary.tpl'
		PASSED_PARAMS={
			'item.annotation','getStringParam("doc.allcomps.item.annotation")';
			'doc.comp.profile','getBooleanParam("doc.allcomps.item.profile")';
			'doc.comp.profile.namespace','getBooleanParam("doc.allcomps.item.profile.namespace")';
			'doc.comp.profile.content','getBooleanParam("doc.allcomps.item.profile.content")';
			'doc.comp.profile.defined','getBooleanParam("doc.allcomps.item.profile.defined")';
			'doc.comp.profile.includes','getBooleanParam("doc.allcomps.item.profile.includes")';
			'doc.comp.profile.redefines','getBooleanParam("doc.allcomps.item.profile.redefines")';
			'doc.comp.profile.redefined','getBooleanParam("doc.allcomps.item.profile.redefined")';
			'doc.comp.profile.used','getBooleanParam("doc.allcomps.item.profile.used")';
		}
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='Bottom Message'
		COND='output.type == "document" &&\n! hasParamValue("show.about", "none")'
		TEMPLATE_FILE='about.tpl'
	</TEMPLATE_CALL>
</ROOT>
CHECKSUM='kZLulVaPR+eveHzMob6v65D9vHQJ68ghqpONRkDlJkE'
</DOCFLEX_TEMPLATE>