<DOCFLEX_TEMPLATE VER='1.13'>
CREATED='2004-06-21 01:50:00'
LAST_UPDATE='2009-10-30 06:36:31'
DESIGNER_TOOL='DocFlex SDK 1.x'
DESIGNER_LICENSE_TYPE='Filigris Works Team'
APP_ID='docflex-xml-xsddoc2'
APP_NAME='DocFlex/XML XSDDoc'
APP_VER='2.2.0'
APP_AUTHOR='Copyright \u00a9 2005-2009 Filigris Works,\nLeonid Rudy Softwareprodukte. All rights reserved.'
TEMPLATE_TYPE='DocumentTemplate'
DSM_TYPE_ID='xsddoc'
ROOT_ET='xs:schema'
<TEMPLATE_PARAMS>
	PARAM={
		param.name='schema-summary';
		param.type='boolean';
		param.hidden='true';
	}
	PARAM={
		param.name='doc.schema.profile.targetNamespace';
		param.title='Target Namespace';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.version';
		param.title='Version';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.components';
		param.title='Components';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.formDefault';
		param.title='Default NS-Qualified Form';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.blockDefault';
		param.title='Default Block Attribute';
		param.grouping='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.blockDefault.value';
		param.title='Value';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.blockDefault.meaning';
		param.title='Meaning';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.finalDefault';
		param.title='Default Final Attribute';
		param.grouping='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.finalDefault.value';
		param.title='Value';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.finalDefault.meaning';
		param.title='Meaning';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.location';
		param.title='Schema Location';
		param.grouping='true';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.location.relative';
		param.title='Relative Path';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.location.hyperlink';
		param.title='Hyperlink';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.schema.profile.relatedSchemas';
		param.title='Related Schemas';
		param.type='boolean';
	}
	PARAM={
		param.name='fmt.page.refs';
		param.title='Generate page references';
		param.type='boolean';
		param.default.value='true';
	}
</TEMPLATE_PARAMS>
FMT={
	doc.lengthUnits='pt';
	doc.hlink.style.link='cs3';
}
<STYLES>
	CHAR_STYLE={
		style.name='Code Smaller';
		style.id='cs1';
		text.font.name='Courier New';
		text.font.size='8';
	}
	CHAR_STYLE={
		style.name='Default Paragraph Font';
		style.id='cs2';
		style.default='true';
	}
	CHAR_STYLE={
		style.name='Hyperlink';
		style.id='cs3';
		text.decor.underline='true';
		text.color.foreground='#0000FF';
	}
	PAR_STYLE={
		style.name='Normal';
		style.id='s1';
		style.default='true';
	}
	CHAR_STYLE={
		style.name='Normal Smaller';
		style.id='cs4';
		text.font.name='Arial';
		text.font.size='9';
	}
	CHAR_STYLE={
		style.name='Page Number Small';
		style.id='cs5';
		text.font.name='Courier New';
		text.font.size='8';
	}
	PAR_STYLE={
		style.name='Profile Subheading';
		style.id='s2';
		text.font.name='Arial';
		text.font.size='9';
		text.font.style.bold='true';
	}
	CHAR_STYLE={
		style.name='Property Note';
		style.id='cs6';
		text.font.name='Tahoma';
		text.font.size='8';
		text.font.style.italic='true';
	}
	CHAR_STYLE={
		style.name='Property Text';
		style.id='cs7';
		text.font.name='Verdana';
		text.font.size='8';
		par.lineHeight='11';
	}
</STYLES>
<ROOT>
	<AREA_SEC>
		DESCR='Target Namespace'
		COND='getBooleanParam("doc.schema.profile.targetNamespace")'
		FMT={
			sec.spacing.before='6';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					txtfl.delimiter.type='none';
					par.style='s2';
				}
				<CTRLS>
					<LABEL>
						TEXT='Target Namespace:'
					</LABEL>
				</CTRLS>
			</CTRL_GROUP>
			<CTRL_GROUP>
				FMT={
					row.indent.block='true';
				}
				<CTRLS>
					<DATA_CTRL>
						FMT={
							text.style='cs1';
						}
						<DOC_HLINK>
							HKEYS={
								'getAttrStringValue("targetNamespace")';
								'"detail"';
							}
						</DOC_HLINK>
						FORMULA='(ns = getAttrStringValue("targetNamespace")) != "" ? ns : "{global namespace}"'
					</DATA_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<AREA_SEC>
		DESCR='Schema Location'
		COND='getBooleanParam("doc.schema.profile.version")\n&&\nhasAttr("version")'
		FMT={
			sec.spacing.before='6';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					txtfl.delimiter.type='none';
					par.style='s2';
				}
				<CTRLS>
					<LABEL>
						TEXT='Version:'
					</LABEL>
				</CTRLS>
			</CTRL_GROUP>
			<CTRL_GROUP>
				FMT={
					row.indent.block='true';
					text.style='cs7';
				}
				<CTRLS>
					<DATA_CTRL>
						<URL_HLINK>
							COND='uri = getAttrStringValue("xmlURI");\nspec = makeRelativePath (uri, mainContext.output.dir);\nuri != spec && ! spec.startsWith(\'..\')'
							TARGET_FRAME_EXPR='"_blank"'
							URL_EXPR='makeRelativePath (\n  getAttrStringValue("xmlURI"),\n  output.dir\n)'
						</URL_HLINK>
						<URL_HLINK>
							COND='! isLocalFile (getAttrStringValue("xmlURI"))'
							TARGET_FRAME_EXPR='"_blank"'
							URL_EXPR='getAttrStringValue("xmlURI")'
						</URL_HLINK>
						ATTR='version'
					</DATA_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<FOLDER>
		DESCR='components defined in this schema'
		COND='getBooleanParam("doc.schema.profile.components")'
		FMT={
			sec.spacing.before='6';
		}
		COLLAPSED
		<BODY>
			<AREA_SEC>
				FMT={
					sec.outputStyle='text-par';
					sec.indent.block='true';
					text.style='cs4';
					txtfl.delimiter.type='text';
					txtfl.delimiter.text=', ';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<PANEL>
								COND='count = countChildren ("xs:element");\n\ncount > 0 ? { setVar ("count", count); true } : false'
								FMT={
									ctrl.size.width='196.5';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												FMT={
													text.option.nbsps='true';
												}
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"element-summary"';
													}
												</DOC_HLINK>
												TEXT='global element'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												FMT={
													text.option.nbsps='true';
												}
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"element-summary"';
													}
												</DOC_HLINK>
												TEXT='global elements'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='count = countElementsByLPath (\n  "descendant::xs:%localElement",\n  BooleanQuery (! hasAttr ("ref")),\n  FlexQuery ({\n    (typeQName = getAttrQNameValue("type")) != null ? \n       HashKey (getAttrValue("name"), typeQName) : contextElement.id\n  })\n);\n\ncount > 0 ? { setVar ("count", count); true } : false'
								FMT={
									ctrl.size.width='189';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												FMT={
													text.option.nbsps='true';
												}
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"element-summary"';
													}
												</DOC_HLINK>
												TEXT='local element'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												FMT={
													text.option.nbsps='true';
												}
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"element-summary"';
													}
												</DOC_HLINK>
												TEXT='local elements'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='count = countElementsByLPath ("descendant::xs:complexType");\n\ncount > 0 ? { setVar ("count", count); true } : false'
								FMT={
									ctrl.size.width='189';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"complexType-summary"';
													}
												</DOC_HLINK>
												TEXT='complexType'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"complexType-summary"';
													}
												</DOC_HLINK>
												TEXT='complexTypes'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='count = countElementsByLPath ("descendant::xs:simpleType");\n\ncount > 0 ? { setVar ("count", count); true } : false'
								FMT={
									ctrl.size.width='176.3';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"simpleType-summary"';
													}
												</DOC_HLINK>
												TEXT='simpleType'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"simpleType-summary"';
													}
												</DOC_HLINK>
												TEXT='simpleTypes'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='count = countElementsByLPath ("descendant::xs:group");\n\ncount > 0 ? { setVar ("count", count); true } : false'
								FMT={
									ctrl.size.width='192';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"group-summary"';
													}
												</DOC_HLINK>
												TEXT='element group'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"group-summary"';
													}
												</DOC_HLINK>
												TEXT='element groups'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='count = countChildren ("xs:attribute");\n\ncount > 0 ? { setVar ("count", count); true } : false'
								FMT={
									ctrl.size.width='194.3';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"attribute-summary"';
													}
												</DOC_HLINK>
												TEXT='global attribute'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"attribute-summary"';
													}
												</DOC_HLINK>
												TEXT='global attributes'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<PANEL>
								COND='count = countElementsByLPath ("descendant::xs:attributeGroup");\n\ncount > 0 ? { setVar ("count", count); true } : false'
								FMT={
									ctrl.size.width='192.8';
									text.option.nbsps='true';
									txtfl.delimiter.type='nbsp';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DATA_CTRL>
												FORMULA='getVar("count")'
											</DATA_CTRL>
											<LABEL>
												COND='getVar("count").toInt() == 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"attributeGroup-summary"';
													}
												</DOC_HLINK>
												TEXT='attribute group'
											</LABEL>
											<LABEL>
												COND='getVar("count").toInt() > 1'
												<DOC_HLINK>
													HKEYS={
														'contextElement.id';
														'"attributeGroup-summary"';
													}
												</DOC_HLINK>
												TEXT='attribute groups'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s2';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								TEXT='Defined Components:'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<AREA_SEC>
		DESCR='Default Namespace-Qualified Form'
		COND='getBooleanParam("doc.schema.profile.formDefault")\n&&\n(hasAttr("elementFormDefault") ||\n hasAttr("attributeFormDefault"))'
		FMT={
			sec.spacing.before='6';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					par.style='s2';
				}
				<CTRLS>
					<LABEL>
						TEXT='Default Namespace-Qualified Form:'
					</LABEL>
				</CTRLS>
			</CTRL_GROUP>
			<CTRL_GROUP>
				FMT={
					row.indent.block='true';
					text.style='cs7';
				}
				<CTRLS>
					<PANEL>
						COND='hasAttr("elementFormDefault")'
						FMT={
							ctrl.size.width='158.3';
							ctrl.size.height='38.3';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='Local Elements:'
									</LABEL>
									<DATA_CTRL>
										ATTR='elementFormDefault'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</PANEL>
					<DELIMITER>
						FMT={
							txtfl.delimiter.type='text';
							txtfl.delimiter.text='; ';
						}
					</DELIMITER>
					<PANEL>
						COND='hasAttr("attributeFormDefault")'
						FMT={
							ctrl.size.width='158.3';
							ctrl.size.height='38.3';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='Local Attributes:'
									</LABEL>
									<DATA_CTRL>
										COND='hasAttr("attributeFormDefault")'
										ATTR='attributeFormDefault'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</PANEL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<AREA_SEC>
		DESCR='Default Block Attribute'
		COND='getBooleanParam("doc.schema.profile.blockDefault")\n&&\ngetAttrValue ("blockDefault") != null'
		FMT={
			sec.spacing.before='6';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					txtfl.delimiter.type='none';
					par.style='s2';
				}
				<CTRLS>
					<LABEL>
						TEXT='Default Block Attribute:'
					</LABEL>
				</CTRLS>
			</CTRL_GROUP>
			<CTRL_GROUP>
				FMT={
					row.indent.block='true';
					text.style='cs7';
				}
				<CTRLS>
					<SS_CALL_CTRL>
						SS_NAME='Default Block Attribute'
					</SS_CALL_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<AREA_SEC>
		DESCR='Default Final Attribute'
		COND='getBooleanParam("doc.schema.profile.finalDefault")\n&&\ngetAttrValue ("finalDefault") != null'
		FMT={
			sec.spacing.before='6';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					txtfl.delimiter.type='none';
					par.style='s2';
				}
				<CTRLS>
					<LABEL>
						TEXT='Default Final Attribute:'
					</LABEL>
				</CTRLS>
			</CTRL_GROUP>
			<CTRL_GROUP>
				FMT={
					row.indent.block='true';
					text.style='cs7';
				}
				<CTRLS>
					<SS_CALL_CTRL>
						SS_NAME='Default Final Attribute'
					</SS_CALL_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<AREA_SEC>
		DESCR='Schema Location'
		COND='getBooleanParam("doc.schema.profile.location")'
		CONTEXT_ELEMENT_EXPR='getXMLDocument()'
		MATCHING_ET='#DOCUMENT'
		FMT={
			sec.spacing.before='6';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					txtfl.delimiter.type='none';
					par.style='s2';
				}
				<CTRLS>
					<LABEL>
						TEXT='Schema Location:'
					</LABEL>
				</CTRLS>
			</CTRL_GROUP>
			<CTRL_GROUP>
				FMT={
					row.indent.block='true';
					text.style='cs7';
				}
				<CTRLS>
					<DATA_CTRL>
						<URL_HLINK>
							COND='getBooleanParam("doc.schema.profile.location.hyperlink")'
							TARGET_FRAME_EXPR='"_blank"'
							URL_EXPR='uri = getAttrStringValue("xmlURI");\n\ngetBooleanParam("doc.schema.profile.location.relative")\n ? makeRelativePath (uri, output.dir, true) : toURL (uri)'
						</URL_HLINK>
						FORMULA='uri = getAttrStringValue("xmlURI");\n\ngetBooleanParam("doc.schema.profile.location.relative")\n ? makeRelativePath (uri, mainContext.output.dir) : uri\n'
					</DATA_CTRL>
					<PANEL>
						COND='hyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source")\n)'
						FMT={
							ctrl.size.width='289.5';
							ctrl.size.height='59.3';
						}
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DELIMITER>
										FMT={
											txtfl.delimiter.type='text';
											txtfl.delimiter.text='; ';
										}
									</DELIMITER>
									<LABEL>
										TEXT='see'
									</LABEL>
									<LABEL>
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"xml-source"';
											}
										</DOC_HLINK>
										TEXT='XML source'
									</LABEL>
									<PANEL>
										COND='output.format.supportsPageRefs && \ngetBooleanParam("fmt.page.refs")'
										FMT={
											ctrl.size.width='184.5';
											ctrl.size.height='38.3';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='nbsp';
														}
													</DELIMITER>
													<LABEL>
														FMT={
															text.style='cs5';
														}
														TEXT='['
													</LABEL>
													<DATA_CTRL>
														FMT={
															ctrl.option.noHLinkFmt='true';
															text.style='cs5';
															text.hlink.fmt='none';
														}
														<DOC_HLINK>
															HKEYS={
																'contextElement.id';
																'"xml-source"';
															}
														</DOC_HLINK>
														DOCFIELD='page-htarget'
													</DATA_CTRL>
													<LABEL>
														FMT={
															text.style='cs5';
														}
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</PANEL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<FOLDER>
		DESCR='Related Schemas'
		COND='getBooleanParam("doc.schema.profile.relatedSchemas")'
		COLLAPSED
		<BODY>
			<ELEMENT_ITER>
				DESCR='imports schemas'
				FMT={
					sec.outputStyle='list';
					sec.spacing.before='6';
					text.style='cs4';
					list.type='delimited';
					list.margin.block='true';
				}
				TARGET_ET='xs:import'
				SCOPE='simple-location-rules'
				RULES={
					'* -> xs:import';
				}
				FILTER='checkElementsByKey ("loaded-schema", contextElement.id)'
				SORTING='by-expr'
				SORTING_KEY={expr='schema = findElementByKey ("loaded-schema", contextElement.id);\nschema.getXMLDocument().getAttrStringValue("xmlName")',ascending}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										CONTEXT_ELEMENT_EXPR='findElementByKey (\n  "loaded-schema", contextElement.id\n).getXMLDocument()'
										MATCHING_ET='#DOCUMENT'
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"detail"';
											}
										</DOC_HLINK>
										ATTR='xmlName'
									</DATA_CTRL>
									<PANEL>
										COND='getBooleanParam("schema-summary")\n&&\n! output.format.supportsPagination\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
										FMT={
											ctrl.size.width='101.3';
											ctrl.size.height='38.3';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='nbsp';
														}
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<LABEL>
														<DOC_HLINK>
															TITLE_EXPR='"see within schema source"'
															HKEYS={
																'contextElement.id';
																'"xml-source-location"';
															}
														</DOC_HLINK>
														TEXT='src'
													</LABEL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									txtfl.delimiter.type='none';
								}
								<CTRLS>
									<DATA_CTRL>
										FORMULA='iterator.numItems > 1? \n  "Imports Schemas (" + iterator.numItems + "):" : "Imports Schema:"'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</ELEMENT_ITER>
			<ELEMENT_ITER>
				DESCR='includes schemas'
				FMT={
					sec.outputStyle='list';
					sec.spacing.before='6';
					text.style='cs4';
					list.type='delimited';
					list.margin.block='true';
				}
				TARGET_ET='xs:include'
				SCOPE='simple-location-rules'
				RULES={
					'* -> xs:include';
				}
				FILTER='checkElementsByKey ("loaded-schema", contextElement.id)'
				SORTING='by-expr'
				SORTING_KEY={expr='schema = findElementByKey ("loaded-schema", contextElement.id);\nschema.getXMLDocument().getAttrStringValue("xmlName")',ascending}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										CONTEXT_ELEMENT_EXPR='findElementByKey (\n  "loaded-schema", contextElement.id\n).getXMLDocument()'
										MATCHING_ET='#DOCUMENT'
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"detail"';
											}
										</DOC_HLINK>
										ATTR='xmlName'
									</DATA_CTRL>
									<PANEL>
										COND='getBooleanParam("schema-summary")\n&&\n! output.format.supportsPagination\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
										FMT={
											ctrl.size.width='101.3';
											ctrl.size.height='38.3';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='nbsp';
														}
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<LABEL>
														<DOC_HLINK>
															TITLE_EXPR='"see within schema source"'
															HKEYS={
																'contextElement.id';
																'"xml-source-location"';
															}
														</DOC_HLINK>
														TEXT='src'
													</LABEL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									txtfl.delimiter.type='none';
								}
								<CTRLS>
									<DATA_CTRL>
										FORMULA='iterator.numItems > 1 ? \n  "Includes Schemas (" + iterator.numItems + "):" : "Includes Schema:"'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</ELEMENT_ITER>
			<ELEMENT_ITER>
				DESCR='redefines schemas'
				FMT={
					sec.outputStyle='list';
					sec.spacing.before='6';
					text.style='cs4';
					list.type='delimited';
					list.margin.block='true';
				}
				TARGET_ET='xs:redefine'
				SCOPE='simple-location-rules'
				RULES={
					'* -> xs:redefine';
				}
				FILTER='checkElementsByKey ("loaded-schema", contextElement.id)'
				SORTING='by-expr'
				SORTING_KEY={expr='schema = findElementByKey ("loaded-schema", contextElement.id);\nschema.getXMLDocument().getAttrStringValue("xmlName")',ascending}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										CONTEXT_ELEMENT_EXPR='findElementByKey (\n  "loaded-schema", contextElement.id\n).getXMLDocument()'
										MATCHING_ET='#DOCUMENT'
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"detail"';
											}
										</DOC_HLINK>
										ATTR='xmlName'
									</DATA_CTRL>
									<PANEL>
										COND='getBooleanParam("schema-summary")\n&&\n! output.format.supportsPagination\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
										FMT={
											ctrl.size.width='101.3';
											ctrl.size.height='38.3';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='nbsp';
														}
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<LABEL>
														<DOC_HLINK>
															TITLE_EXPR='"see within schema source"'
															HKEYS={
																'contextElement.id';
																'"xml-source-location"';
															}
														</DOC_HLINK>
														TEXT='src'
													</LABEL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									txtfl.delimiter.type='none';
								}
								<CTRLS>
									<DATA_CTRL>
										FORMULA='iterator.numItems > 1 ? \n  "Redefines Schemas (" + iterator.numItems + "):" : "Redefines Schema"'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</ELEMENT_ITER>
			<ELEMENT_ITER>
				DESCR='imported by schemas'
				FMT={
					sec.outputStyle='list';
					sec.spacing.before='6';
					text.style='cs4';
					list.type='delimited';
					list.margin.block='true';
				}
				TARGET_ET='xs:import'
				SCOPE='custom'
				ELEMENT_ENUM_EXPR='findElementsByKey ("schema-loading-elements", contextElement.id)'
				SORTING='by-expr'
				SORTING_KEY={expr='getXMLDocument().getAttrStringValue("xmlName")',ascending}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										CONTEXT_ELEMENT_EXPR='getXMLDocument()'
										MATCHING_ET='#DOCUMENT'
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"detail"';
											}
										</DOC_HLINK>
										ATTR='xmlName'
									</DATA_CTRL>
									<PANEL>
										COND='getBooleanParam("schema-summary")\n&&\n! output.format.supportsPagination\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
										FMT={
											ctrl.size.width='101.3';
											ctrl.size.height='38.3';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='nbsp';
														}
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<LABEL>
														<DOC_HLINK>
															TITLE_EXPR='"see within schema source"'
															HKEYS={
																'contextElement.id';
																'"xml-source-location"';
															}
														</DOC_HLINK>
														TEXT='src'
													</LABEL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									txtfl.delimiter.type='none';
								}
								<CTRLS>
									<DATA_CTRL>
										FORMULA='iterator.numItems > 1 ? \n  "Imported by Schemas (" + iterator.numItems + "):" : "Imported by Schema:"'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</ELEMENT_ITER>
			<ELEMENT_ITER>
				DESCR='included in schemas'
				FMT={
					sec.outputStyle='list';
					sec.spacing.before='6';
					text.style='cs4';
					list.type='delimited';
					list.margin.block='true';
				}
				TARGET_ET='xs:include'
				SCOPE='custom'
				ELEMENT_ENUM_EXPR='findElementsByKey ("schema-loading-elements", contextElement.id)'
				SORTING='by-expr'
				SORTING_KEY={expr='getXMLDocument().getAttrStringValue("xmlName")',ascending}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										CONTEXT_ELEMENT_EXPR='getXMLDocument()'
										MATCHING_ET='#DOCUMENT'
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"detail"';
											}
										</DOC_HLINK>
										ATTR='xmlName'
									</DATA_CTRL>
									<PANEL>
										COND='getBooleanParam("schema-summary")\n&&\n! output.format.supportsPagination\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
										FMT={
											ctrl.size.width='101.3';
											ctrl.size.height='38.3';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='nbsp';
														}
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<LABEL>
														<DOC_HLINK>
															TITLE_EXPR='"see within schema source"'
															HKEYS={
																'contextElement.id';
																'"xml-source-location"';
															}
														</DOC_HLINK>
														TEXT='src'
													</LABEL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									txtfl.delimiter.type='none';
								}
								<CTRLS>
									<DATA_CTRL>
										FORMULA='iterator.numItems > 1 ? \n  "Included in Schemas (" + iterator.numItems + "):" : "Included in Schema:"'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</ELEMENT_ITER>
			<ELEMENT_ITER>
				DESCR='redefined in schemas'
				FMT={
					sec.outputStyle='list';
					sec.spacing.before='6';
					text.style='cs4';
					list.type='delimited';
					list.margin.block='true';
				}
				TARGET_ET='xs:redefine'
				SCOPE='custom'
				ELEMENT_ENUM_EXPR='findElementsByKey ("schema-loading-elements", contextElement.id)'
				SORTING='by-expr'
				SORTING_KEY={expr='getXMLDocument().getAttrStringValue("xmlName")',ascending}
				COLLAPSED
				<BODY>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<DATA_CTRL>
										CONTEXT_ELEMENT_EXPR='getXMLDocument()'
										MATCHING_ET='#DOCUMENT'
										<DOC_HLINK>
											HKEYS={
												'contextElement.id';
												'"detail"';
											}
										</DOC_HLINK>
										ATTR='xmlName'
									</DATA_CTRL>
									<PANEL>
										COND='getBooleanParam("schema-summary")\n&&\n! output.format.supportsPagination\n&&\nhyperTargetExists (\n  ArgumentList (contextElement.id, "xml-source-location")\n)'
										FMT={
											ctrl.size.width='101.3';
											ctrl.size.height='38.3';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='nbsp';
														}
													</DELIMITER>
													<LABEL>
														TEXT='['
													</LABEL>
													<LABEL>
														<DOC_HLINK>
															TITLE_EXPR='"see within schema source"'
															HKEYS={
																'contextElement.id';
																'"xml-source-location"';
															}
														</DOC_HLINK>
														TEXT='src'
													</LABEL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									txtfl.delimiter.type='none';
								}
								<CTRLS>
									<DATA_CTRL>
										FORMULA='iterator.numItems > 1 ? \n  "Redefined in Schemas (" + iterator.numItems + "):" : "Redefined in Schema:"'
									</DATA_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</ELEMENT_ITER>
		</BODY>
	</FOLDER>
</ROOT>
<STOCK_SECTIONS>
	<FOLDER>
		MATCHING_ET='xs:schema'
		SS_NAME='Default Block Attribute'
		<BODY>
			<AREA_SEC>
				COND='getBooleanParam("doc.schema.profile.blockDefault.value")'
				FMT={
					text.style='cs1';
					txtfl.delimiter.type='none';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								TEXT='"'
							</LABEL>
							<DATA_CTRL>
								FMT={
									txtfl.delimiter.text=' ';
								}
								ATTR='blockDefault'
							</DATA_CTRL>
							<LABEL>
								TEXT='"'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<FOLDER>
				DESCR='meaning'
				COND='getBooleanParam("doc.schema.profile.blockDefault.meaning")'
				FMT={
					text.style='cs6';
				}
				<BODY>
					<AREA_SEC>
						DESCR='#all'
						COND='hasAttrValue("blockDefault", "#all")'
						BREAK_PARENT_BLOCK='when-executed'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='(blocks all substitutions of elements and their types both through substitution groups and xsi:type attribute in instance XML documents)'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<FOLDER>
						DESCR='substitution, ...'
						COND='hasAttrValue ("blockDefault", "substitution")'
						BREAK_PARENT_BLOCK='when-executed'
						<BODY>
							<AREA_SEC>
								DESCR='extension, restriction'
								COND='values = getAttrValues("blockDefault");\n\nderivations = Vector();\n\nvalues.contains ("extension") ?\n  derivations.addElement ("extension");\n\nvalues.contains ("restriction") ?\n  derivations.addElement ("restriction");\n\nderivations.size() > 0 ? \n{\n  setVar ("blocked_derivations", derivations);\n  true\n} : false'
								BREAK_PARENT_BLOCK='when-executed'
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<LABEL>
												TEXT='(blocks any substitutions of elements through substitution groups and substitutions of their types through xsi:type attribute by types derived by'
											</LABEL>
											<DATA_CTRL>
												FORMULA='mergeStrings (\n  getVar ("blocked_derivations").toVector(),\n  ", ", " or "\n)'
											</DATA_CTRL>
											<LABEL>
												TEXT='from the types of the elements or any other complex types)'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</AREA_SEC>
							<AREA_SEC>
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<LABEL>
												TEXT='(blocks any substitutions of elements through substitution groups)'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</AREA_SEC>
						</BODY>
					</FOLDER>
					<AREA_SEC>
						DESCR='extension, restriction'
						COND='values = values = getAttrValues("blockDefault");\n\nderivations = Vector();\n\nvalues.contains ("extension") ?\n  derivations.addElement ("extension");\n\nvalues.contains ("restriction") ?\n  derivations.addElement ("restriction");\n\nderivations.size() > 0 ? \n{\n  setVar ("blocked_derivations", derivations);\n  true\n} : false'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='(blocks any substitutions of elements or their types both through xsi:type attribute and substitution groups by elements or types, derived by'
									</LABEL>
									<DATA_CTRL>
										FORMULA='mergeStrings (\n  getVar ("blocked_derivations").toVector(),\n  ", ", " or "\n)'
									</DATA_CTRL>
									<LABEL>
										TEXT='from the types of the elements or any other complex types)'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
		</BODY>
	</FOLDER>
	<FOLDER>
		MATCHING_ET='xs:schema'
		SS_NAME='Default Final Attribute'
		<BODY>
			<AREA_SEC>
				COND='getBooleanParam("doc.schema.profile.finalDefault.value")'
				FMT={
					text.style='cs1';
					txtfl.delimiter.type='none';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								TEXT='"'
							</LABEL>
							<DATA_CTRL>
								FMT={
									txtfl.delimiter.text=' ';
								}
								ATTR='finalDefault'
							</DATA_CTRL>
							<LABEL>
								TEXT='"'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<FOLDER>
				DESCR='meaning'
				COND='getBooleanParam("doc.schema.profile.finalDefault.meaning")'
				FMT={
					text.style='cs6';
				}
				<BODY>
					<AREA_SEC>
						DESCR='#all'
						COND='hasAttrValue("finalDefault", "#all")'
						BREAK_PARENT_BLOCK='when-executed'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='(prohinits using elements defined in this schema as the heads of any substitution groups)'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
					<AREA_SEC>
						DESCR='extension, restriction'
						COND='values = getAttrValues("finalDefault");\n\nderivations = Vector();\n\nvalues.contains ("extension") ?\n  derivations.addElement ("extension");\n\nvalues.contains ("restriction") ?\n  derivations.addElement ("restriction");\n\nderivations.size() > 0 ? \n{\n  setVar ("blocked_derivations", derivations);\n  true\n} : false'
						<AREA>
							<CTRL_GROUP>
								<CTRLS>
									<LABEL>
										TEXT='(prohibits using element defined in this schema as the heads of substitution groups for elements whose types are derived by'
									</LABEL>
									<DATA_CTRL>
										FORMULA='mergeStrings (\n  getVar ("blocked_derivations").toVector(),\n  ", ", " or "\n)'
									</DATA_CTRL>
									<LABEL>
										TEXT='from the types of the elements)'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
		</BODY>
	</FOLDER>
</STOCK_SECTIONS>
CHECKSUM='PLH0aiAIecsajaDj0ndFxxoyn18RAgxsamkHY4?KkWM'
</DOCFLEX_TEMPLATE>